{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/animated_sprite_demo/AnimatedSpriteDemo.ts","src/wolfie2d/Game.ts","src/wolfie2d/files/ResourceManager.ts","src/wolfie2d/loop/GameLoopTemplate.ts","src/wolfie2d/math/MathUtilities.ts","src/wolfie2d/math/Matrix.ts","src/wolfie2d/math/Vector3.ts","src/wolfie2d/rendering/TextRenderer.ts","src/wolfie2d/rendering/WebGLGameCircleRenderer.ts","src/wolfie2d/rendering/WebGLGameRenderingSystem.ts","src/wolfie2d/rendering/WebGLGameShader.ts","src/wolfie2d/rendering/WebGLGameSpriteRenderer.ts","src/wolfie2d/rendering/WebGLGameTexture.ts","src/wolfie2d/scene/GradientCircle.ts","src/wolfie2d/scene/SceneGraph.ts","src/wolfie2d/scene/SceneObject.ts","src/wolfie2d/scene/sprite/AnimatedSprite.ts","src/wolfie2d/scene/sprite/AnimatedSpriteType.ts","src/wolfie2d/ui/UIController.ts"],"names":[],"mappings":"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","file":"demo.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { GradientCircle } from './../wolfie2d/scene/GradientCircle';\r\nimport { UIController } from './../wolfie2d/ui/UIController';\r\nimport { WebGLGameShader } from './../wolfie2d/rendering/WebGLGameShader';\r\nimport { WebGLGameSpriteRenderer } from './../wolfie2d/rendering/WebGLGameSpriteRenderer';\r\n/*\r\n * AnimatedSpriteDemo.ts - demonstrates some simple sprite rendering and \r\n * animation as well as some basic mouse interactions. Note that the\r\n * AnimationSpriteDemo class loads and creates custom content for the\r\n * purpose of demonstrating basic functionality.\r\n */\r\nimport {Game} from '../wolfie2d/Game'\r\nimport {ResourceManager} from '../wolfie2d/files/ResourceManager'\r\nimport {TextToRender} from '../wolfie2d/rendering/TextRenderer'\r\nimport {WebGLGameRenderingSystem} from '../wolfie2d/rendering/WebGLGameRenderingSystem'\r\nimport {SceneGraph} from '../wolfie2d/scene/SceneGraph'\r\nimport {AnimatedSprite} from '../wolfie2d/scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../wolfie2d/scene/sprite/AnimatedSpriteType'\r\nimport { SceneObject } from '../wolfie2d/scene/SceneObject';\r\n\r\n\r\n// IN THIS EXAMPLE WE'LL HAVE 2 SPRITE TYPES THAT EACH HAVE THE SAME 2 STATES\r\n// AND WHERE EACH SPRITE TYPE HAS ITS OWN SPRITE SHEET\r\nconst DEMO_SPRITE_TYPES : string[] = [\r\n    'resources/animated_sprites/RedCircleMan.json',\r\n    'resources/animated_sprites/MultiColorBlock.json'\r\n];\r\nconst DEMO_SPRITE_STATES = {\r\n    FORWARD_STATE: 'FORWARD',\r\n    REVERSE_STATE: 'REVERSE'\r\n};\r\nconst DEMO_TEXTURES : string[] = [\r\n    'resources/images/EightBlocks.png', \r\n    'resources/images/RedCircleMan.png'\r\n];\r\n\r\nclass AnimatedSpriteDemo {\r\n    constructor() {}\r\n\r\n    /**\r\n     * This method initializes the application, building all the needed\r\n     * game objects and setting them up for use.\r\n     */\r\n    public buildTestScene(game : Game, callback : Function) {\r\n        let renderingSystem : WebGLGameRenderingSystem = game.getRenderingSystem();\r\n        let sceneGraph : SceneGraph = game.getSceneGraph();\r\n        let resourceManager : ResourceManager = game.getResourceManager();\r\n        let builder = this;\r\n \r\n        // EMPLOY THE RESOURCE MANAGER TO BUILD ALL THE WORLD CONTENT\r\n        resourceManager.loadTextures(DEMO_TEXTURES, renderingSystem, function() {\r\n            // ONLY AFTER ALL THE TEXTURES HAVE LOADED LOAD THE SPRITE TYPES\r\n            resourceManager.loadSpriteTypes(DEMO_SPRITE_TYPES, function() {\r\n                // ONLY AFTER ALL THE SPRITE TYPES HAVE LOADED LOAD THE SPRITES\r\n                builder.buildAnimatedSprites(resourceManager, sceneGraph);\r\n\r\n                // AND BUILD ALL THE TEXT OUR APP WILL USE\r\n                builder.buildText(game);\r\n\r\n                // EVERYTHING HAS BEEN BUILT, CALL THE CALLBACK\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Builds all the animated sprites to be used by the application and\r\n     * adds them to the scene.\r\n     */\r\n    private buildAnimatedSprites(resourceManager : ResourceManager, scene : SceneGraph) {\r\n        let canvasWidth : number = (<HTMLCanvasElement>document.getElementById(\"game_canvas\")).width;\r\n        let canvasHeight : number = (<HTMLCanvasElement>document.getElementById(\"game_canvas\")).height;\r\n\r\n        // BUILD A BUNCH OF CIRCLE SPRITES\r\n        for (let i = 0; i < DEMO_SPRITE_TYPES.length; i++) {\r\n            for (let j = 0; j < 5; j++) {\r\n                let spriteTypeToUse : string = DEMO_SPRITE_TYPES[i];\r\n                let animatedSpriteType : AnimatedSpriteType = resourceManager.getAnimatedSpriteTypeById(spriteTypeToUse);\r\n                let spriteToAdd : AnimatedSprite = new AnimatedSprite(animatedSpriteType, DEMO_SPRITE_STATES.FORWARD_STATE);\r\n                let randomX : number = Math.floor(Math.random() * canvasWidth) - (animatedSpriteType.getSpriteWidth()/2);\r\n                let randomY : number = Math.floor(Math.random() * canvasHeight) - (animatedSpriteType.getSpriteHeight()/2);\r\n                spriteToAdd.getPosition().set(randomX, randomY, 0.0, 1.0);\r\n                scene.addAnimatedSprite(spriteToAdd);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 5; i ++) {\r\n            let randomX : number = Math.floor(Math.random() * canvasWidth) - (200);\r\n            let randomY : number = Math.floor(Math.random() * canvasHeight) - (200);\r\n            let circleToAdd: GradientCircle = new GradientCircle(300, 300);\r\n            circleToAdd.getPosition().set(randomX, randomY, 0.0, 1.0);\r\n            scene.addGradientCircle(circleToAdd);\r\n        }\r\n\r\n        // For gradient cirlce with shader\r\n\r\n        // for (let j = 0; j < 5; j++) {\r\n            let renderingSystem: WebGLGameRenderingSystem = game.getRenderingSystem();\r\n            let spriteRenderer: WebGLGameSpriteRenderer = renderingSystem.getSpriteRenderer();\r\n            let gl: WebGLRenderingContext = renderingSystem.getWebGL();\r\n    }\r\n\r\n    \r\n\r\n    /*\r\n     * Builds all the text to be displayed in the application.\r\n     */\r\n    private buildText(game : Game) {\r\n        let sceneGraph : SceneGraph = game.getSceneGraph();\r\n        let numSpritesText = new TextToRender(\"Num Sprites\", \"\", 20, 50, function() {\r\n            numSpritesText.text = \"Number of Scene Objects: \" + sceneGraph.getTotalSceneNums();\r\n        });\r\n        let textRenderer = game.getRenderingSystem().getTextRenderer();\r\n        textRenderer.addTextToRender(numSpritesText);\r\n\r\n\r\n        let detail = new TextToRender(\"Detail\", \"\", 20, 90, function() {\r\n                \r\n            let uiController: UIController = game.getUIController();\r\n            let sprite: AnimatedSprite = uiController.getMouseOverSprite();\r\n            let circle: GradientCircle = uiController.getMouseOverCircle();\r\n            let obj: SceneObject = uiController.getMouseOverObj();\r\n\r\n            let x: number = uiController.getMouseX();\r\n            let y: number = uiController.getMouseY();\r\n            if (obj != null && obj instanceof AnimatedSprite) {\r\n                detail.text = `MouseX: ${x}, MouseY: ${y}  position:` + obj.toString();\r\n            } else if (obj != null && obj instanceof GradientCircle) {\r\n                detail.text = `MouseX: ${x}, MouseY: ${y}  position` + obj.toString();;\r\n            } else {\r\n                detail.text = \"\";\r\n            }\r\n        });\r\n        textRenderer.addTextToRender(detail);\r\n    }\r\n}\r\n\r\n// THIS IS THE ENTRY POINT INTO OUR APPLICATION, WE MAKE\r\n// THE Game OBJECT AND INITIALIZE IT WITH THE CANVASES\r\nexport let game = new Game();\r\ngame.init(\"game_canvas\", \"text_canvas\");\r\n\r\n// BUILD THE GAME SCENE\r\nlet demo = new AnimatedSpriteDemo();\r\ndemo.buildTestScene(game, function() {\r\n    // AND START THE GAME LOOP\r\n    game.start();\r\n});","/*\r\n * Game is the focal point of the application, it has 4 subsystems,\r\n * the resource manager, the scene graph, the rendering system, and\r\n * the UI controller. In addition it serves as the game loop, providing\r\n * both an update and draw function that is called on a schedule.\r\n */\r\nimport {GameLoopTemplate} from './loop/GameLoopTemplate'\r\nimport {WebGLGameRenderingSystem} from './rendering/WebGLGameRenderingSystem'\r\nimport {SceneGraph} from './scene/SceneGraph'\r\nimport {AnimatedSprite} from './scene/sprite/AnimatedSprite'\r\nimport {ResourceManager} from './files/ResourceManager'\r\nimport {UIController} from './ui/UIController'\r\nimport { SceneObject } from './scene/SceneObject';\r\n\r\nexport class Game extends GameLoopTemplate {\r\n    private resourceManager : ResourceManager = new ResourceManager();\r\n    private sceneGraph : SceneGraph = new SceneGraph();\r\n    private renderingSystem : WebGLGameRenderingSystem = new WebGLGameRenderingSystem();\r\n    private uiController : UIController = new UIController();\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public getUIController(): UIController {\r\n        return this.uiController;\r\n    }\r\n\r\n    public getRenderingSystem() : WebGLGameRenderingSystem {\r\n        return this.renderingSystem;\r\n    }\r\n\r\n    public getResourceManager() : ResourceManager {\r\n        return this.resourceManager;\r\n    }\r\n\r\n    public getSceneGraph() : SceneGraph {\r\n        return this.sceneGraph;\r\n    }\r\n\r\n    public init(gameCanvasId : string, textCanvasId : string) : void {\r\n        this.renderingSystem.init(gameCanvasId, textCanvasId);\r\n        this.uiController.init(gameCanvasId, this.sceneGraph, this.getRenderingSystem());\r\n    }\r\n\r\n    public begin() : void {\r\n    }\r\n\r\n    /*\r\n     * This draws the game. Note that we are not currently using the \r\n     * interpolation value, but could once physics is involved.\r\n     */\r\n    public draw(interpolationPercentage : number) : void {\r\n        // GET THE VISIBLE SET FROM THE SCENE GRAPH\r\n        let visibleSprites : Array<SceneObject>;\r\n        visibleSprites = <Array<SceneObject>>this.sceneGraph.scope();\r\n\r\n        // RENDER THE VISIBLE SET, WHICH SHOULD ALL BE RENDERABLE\r\n        this.renderingSystem.render(visibleSprites);\r\n    }\r\n\r\n    /**\r\n     * Updates the scene.\r\n     */\r\n    public update(delta : number) : void {\r\n        this.sceneGraph.update(delta);\r\n    }\r\n    \r\n    /**\r\n     * Updates the FPS counter.\r\n     */\r\n    public end(fps : number, panic : boolean) : void {\r\n        if (panic) {\r\n            var discardedTime = Math.round(this.resetFrameDelta());\r\n            console.warn('Main loop panicked, probably because the browser tab was put in the background. Discarding ' + discardedTime + 'ms');\r\n        }\r\n    }\r\n}","/*\r\n * ResourceManager.js\r\n *\r\n * This class is responsible for managing all shared resources. This means things\r\n * that may be needed by multiple game objects. In this application this means\r\n * textures for the purpose of GPU rendering and animated sprite types.\r\n */\r\nimport {SpriteTypeData, AnimationStateData, AnimationFrameData} from './SpriteTypeData'\r\nimport {HashTable} from '../data/HashTable'\r\nimport {WebGLGameRenderingSystem} from '../rendering/WebGLGameRenderingSystem'\r\nimport {WebGLGameTexture} from '../rendering/WebGLGameTexture'\r\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\r\n\r\nexport class ResourceManager {\r\n    // GAME TEXTURES \r\n    private gameTextures : Array<WebGLGameTexture> = new Array();\r\n    private gameTextureIds : HashTable<number> = {};\r\n    private numTexturesToLoad : number;\r\n    private numTexturesLoaded : number;\r\n\r\n    // ANIMATED SPRITE TYPES\r\n    private gameSpriteTypes : Array<AnimatedSpriteType> = new Array();\r\n    private gameSpriteTypeIds : HashTable<number> = {};\r\n    private numSpriteTypesToLoad : number;\r\n    private numSpriteTypesLoaded : number;\r\n\r\n    public constructor() {}\r\n\r\n    // ACCESSOR METHODS\r\n\r\n    public getAnimatedSpriteTypeByIndex(typeIndex : number) : AnimatedSpriteType {\r\n        return this.gameSpriteTypes[typeIndex];\r\n    }\r\n\r\n    public getAnimatedSpriteTypeById(typeId : string) : AnimatedSpriteType {\r\n        let typeIndex : number = this.gameSpriteTypeIds[typeId];\r\n        return this.getAnimatedSpriteTypeByIndex(typeIndex);\r\n    }\r\n    \r\n    // ADDS A NEW SPRITE TYPE \r\n    public addAnimatedSpriteType(typeId : number, spriteType : AnimatedSpriteType) : void {\r\n        this.gameSpriteTypes[typeId] = spriteType;\r\n    }\r\n\r\n    /*\r\n     * Loads all the textures listed in the texturePaths argument and once\r\n     * that is done it calls the callback function.\r\n     */\r\n    public loadTextures(    texturePaths : Array<string>, \r\n                            renderingSystem : WebGLGameRenderingSystem, \r\n                            callback : Function) : void {\r\n        // THEN LOAD THE TEXTURES WE'LL BE USING\r\n        this.numTexturesToLoad = texturePaths.length;\r\n        this.numTexturesLoaded = 0;\r\n        let thisResourceManager = this;\r\n        let startNumTextures = this.gameTextures.length;\r\n        for (let i : number = 0; i < this.numTexturesToLoad; i++) {\r\n            let textureToLoad : WebGLGameTexture = new WebGLGameTexture();\r\n            let textureId = startNumTextures + i;\r\n            thisResourceManager.gameTextures[textureId] = textureToLoad;\r\n            thisResourceManager.gameTextureIds[texturePaths[i]] = textureId;\r\n            thisResourceManager.loadImage(texturePaths[i], textureId, function(id : number, image : HTMLImageElement) {\r\n                renderingSystem.initWebGLTexture(textureToLoad, id, image, function() {\r\n                    thisResourceManager.completeLoadingTexture(callback);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Loads all the sprite types listed in the spriteTypePaths argument and once\r\n     * that is done it calls the callback function.\r\n     */\r\n    public loadSpriteTypes(spriteTypePaths : Array<string>, \r\n                    callback : Function) : void {\r\n        // THEN LOAD THE TEXTURES WE'LL BE USING\r\n        this.numSpriteTypesToLoad = spriteTypePaths.length;\r\n        this.numSpriteTypesLoaded = 0;\r\n        let thisResourceManager = this;\r\n        let startNumSpriteTypes = this.gameSpriteTypes.length;\r\n        for (let i : number = 0; i < this.numSpriteTypesToLoad; i++) {\r\n            let spriteTypeId = startNumSpriteTypes + i;\r\n            this.loadSpriteType(spriteTypePaths[i], spriteTypeId, function() {\r\n                thisResourceManager.completeLoadingSpriteType(callback);\r\n            });\r\n        }\r\n    }\r\n\r\n    // PRIVATE HELPER METHODS\r\n\r\n    // LOADS A NEW JSON FILE AND UPON COMPLETION CALLS THE callback FUNCTION\r\n    private loadJsonFile(testFilePath : string, callback : Function) : void {\r\n        let xobj : XMLHttpRequest = new XMLHttpRequest();\r\n        xobj.overrideMimeType(\"application/json\");\r\n        xobj.open('GET', testFilePath, true);\r\n        xobj.onreadystatechange = function () {\r\n            if ((xobj.readyState == 4) && (xobj.status == 200)) {\r\n                callback(xobj.responseText);\r\n            }\r\n        };\r\n        xobj.send(null);\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL TEXTURE LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingTexture(callback : Function) : void {\r\n        this.numTexturesLoaded++;\r\n        if (this.numTexturesLoaded === this.numTexturesToLoad) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an Image into RAM and once that process is complete it\r\n     * calls the callback method argument, presumably to then load\r\n     * it into GPU memory.\r\n     */\r\n    private loadImage(path : string, id : number, callback : Function) : void {\r\n        // MAKE THE IMAGE\r\n        var image = new Image();\r\n\r\n        // ONCE THE IMAGE LOADING IS COMPLETED, THE CALLBACK WILL GET CALLED\r\n        image.onload = function () { \r\n            callback(id, image); \r\n        }\r\n\r\n        // START IMAGE LOADING\r\n        image.src = path;\r\n    }\r\n\r\n    /*\r\n     * This function loads a single sprite type resource from a JSON file and upon\r\n     * completion calls the callback function.\r\n     */\r\n    private loadSpriteType(jsonFilePath : string, spriteTypeId : number, callback : Function) : void {\r\n        let thisResourceManager : ResourceManager = this;\r\n        this.loadJsonFile(jsonFilePath, function(jsonText : string) {\r\n            let spriteType : AnimatedSpriteType = thisResourceManager.loadSpriteTypeData(jsonText);\r\n            thisResourceManager.gameSpriteTypes[spriteTypeId] = spriteType;\r\n            thisResourceManager.gameSpriteTypeIds[jsonFilePath] = spriteTypeId;\r\n            callback();\r\n        });\r\n    }\r\n\r\n    /*\r\n     * This helper function loads all the json text into an AnimatedSpriteType\r\n     * object and returns it.\r\n     */\r\n    private loadSpriteTypeData = (jsonText : string) : AnimatedSpriteType => {\r\n        let jsonData : SpriteTypeData = <SpriteTypeData>JSON.parse(jsonText);\r\n        let texturePath = jsonData.spriteSheetImage;\r\n        let textureId = this.gameTextureIds[texturePath];\r\n        let texture : WebGLGameTexture = this.gameTextures[textureId];\r\n        let spriteWidth : number = jsonData.spriteWidth;\r\n        let spriteHeight : number = jsonData.spriteHeight;\r\n        let animatedSpriteType = new AnimatedSpriteType(texture, spriteWidth, spriteHeight);\r\n        for (let i = 0; i < jsonData.animations.length; i++) {\r\n            let animation = <AnimationStateData>jsonData.animations[i];\r\n            animatedSpriteType.addAnimation(animation.name);\r\n            for (var j = 0; j < animation.frames.length; j++) {\r\n                var frame = animation.frames[j];\r\n                animatedSpriteType.addAnimationFrame(animation.name, frame.index, frame.duration);\r\n            }\r\n        }\r\n        return animatedSpriteType;\r\n    }\r\n\r\n    // CHECKS TO SEE IF ALL SPRITE TYPE LOADING IS COMPLETE, IF YES, callback IS INVOKED\r\n    private completeLoadingSpriteType(callback : Function) : void {\r\n        this.numSpriteTypesLoaded++;\r\n        if (this.numSpriteTypesLoaded === this.numSpriteTypesToLoad) {\r\n            callback();\r\n        }\r\n    }    \r\n}","export abstract class GameLoopTemplate {\r\n    // ALL INSTANCE VARIABLES WILL BE INITIALIZED VIA THE CONSTRUCTOR\r\n    private fps: number;\r\n    private simulationTimestep: number;\r\n    private frameDelta: number;\r\n    private lastFrameTimeMs: number;\r\n    private fpsAlpha: number;\r\n    private fpsUpdateInterval: number;\r\n    private lastFpsUpdate: number;\r\n    private framesSinceLastFpsUpdate: number;\r\n    private numUpdateSteps: number;\r\n    private minFrameDelay: number;\r\n    private running: boolean;\r\n    private started: boolean;\r\n    private panic: boolean;\r\n    private raf: number;\r\n\r\n    constructor() {\r\n        // An exponential moving average of the frames per second.\r\n        this.fps = 60;\r\n\r\n        // The amount of time (in milliseconds) to simulate each time update() runs.\r\n        // See `MainLoop.setSimulationTimestep()` for details.\r\n        this.simulationTimestep = 1000 / this.fps;\r\n\r\n        // The cumulative amount of in-app time that hasn't been simulated yet.\r\n        // See the comments inside animate() for details.\r\n        this.frameDelta = 0;\r\n\r\n        // The timestamp in milliseconds of the last time the main loop was run.\r\n        // Used to compute the time elapsed between frames.\r\n        this.lastFrameTimeMs = 0;\r\n\r\n        // A factor that affects how heavily to weight more recent seconds'\r\n        // performance when calculating the average frames per second. Valid values\r\n        // range from zero to one inclusive. Higher values result in weighting more\r\n        // recent seconds more heavily.\r\n        this.fpsAlpha = 0.9;\r\n\r\n        // The minimum duration between updates to the frames-per-second estimate.\r\n        // Higher values increase accuracy, but result in slower updates.\r\n        this.fpsUpdateInterval = 1000;\r\n\r\n        // The timestamp (in milliseconds) of the last time the `fps` moving\r\n        // average was updated.\r\n        this.lastFpsUpdate = 0;\r\n\r\n        // The number of frames delivered since the last time the `fps` moving\r\n        // average was updated (i.e. since `lastFpsUpdate`).\r\n        this.framesSinceLastFpsUpdate = 0;\r\n\r\n        // The number of times update() is called in a given frame. This is only\r\n        // relevant inside of animate(), but a reference is held externally so that\r\n        // this variable is not marked for garbage collection every time the main\r\n        // loop runs.\r\n        this.numUpdateSteps = 0;\r\n\r\n        // The minimum amount of time in milliseconds that must pass since the last\r\n        // frame was executed before another frame can be executed. The\r\n        // multiplicative inverse caps the FPS (the default of zero means there is\r\n        // no cap).\r\n        this.minFrameDelay = 0;\r\n\r\n        // Whether the main loop is running.\r\n        this.running = false;\r\n\r\n        // `true` if `MainLoop.start()` has been called and the most recent time it\r\n        // was called has not been followed by a call to `MainLoop.stop()`. This is\r\n        // different than `running` because there is a delay of a few milliseconds\r\n        // after `MainLoop.start()` is called before the application is considered\r\n        // \"running.\" This delay is due to waiting for the next frame.\r\n        this.started = false;\r\n\r\n        // Whether the simulation has fallen too far behind real time.\r\n        // Specifically, `panic` will be set to `true` if too many updates occur in\r\n        // one frame. This is only relevant inside of animate(), but a reference is\r\n        // held externally so that this variable is not marked for garbage\r\n        // collection every time the main loop runs.\r\n        this.panic = false;\r\n    }\r\n\r\n    /**\r\n     * Gets how many milliseconds should be simulated by every run of update().\r\n     *\r\n     * See `MainLoop.setSimulationTimestep()` for details on this value.\r\n     *\r\n     * @return {Number}\r\n     *   The number of milliseconds that should be simulated by every run of\r\n     *   {@link #setUpdate update}().\r\n     */\r\n    getSimulationTimestep(): number {\r\n        return this.simulationTimestep;\r\n    }\r\n\r\n    /**\r\n     * Sets how many milliseconds should be simulated by every run of update().\r\n     *\r\n     * The perceived frames per second (FPS) is effectively capped at the\r\n     * multiplicative inverse of the simulation timestep. That is, if the\r\n     * timestep is 1000 / 60 (which is the default), then the maximum perceived\r\n     * FPS is effectively 60. Decreasing the timestep increases the maximum\r\n     * perceived FPS at the cost of running {@link #setUpdate update}() more\r\n     * times per frame at lower frame rates. Since running update() more times\r\n     * takes more time to process, this can actually slow down the frame rate.\r\n     * Additionally, if the amount of time it takes to run update() exceeds or\r\n     * very nearly exceeds the timestep, the application will freeze and crash\r\n     * in a spiral of death (unless it is rescued; see `MainLoop.setEnd()` for\r\n     * an explanation of what can be done if a spiral of death is occurring).\r\n     *\r\n     * The exception to this is that interpolating between updates for each\r\n     * render can increase the perceived frame rate and reduce visual\r\n     * stuttering. See `MainLoop.setDraw()` for an explanation of how to do\r\n     * this.\r\n     *\r\n     * If you are considering decreasing the simulation timestep in order to\r\n     * raise the maximum perceived FPS, keep in mind that most monitors can't\r\n     * display more than 60 FPS. Whether humans can tell the difference among\r\n     * high frame rates depends on the application, but for reference, film is\r\n     * usually displayed at 24 FPS, other videos at 30 FPS, most games are\r\n     * acceptable above 30 FPS, and virtual reality might require 75 FPS to\r\n     * feel natural. Some gaming monitors go up to 144 FPS. Setting the\r\n     * timestep below 1000 / 144 is discouraged and below 1000 / 240 is\r\n     * strongly discouraged. The default of 1000 / 60 is good in most cases.\r\n     *\r\n     * The simulation timestep should typically only be changed at\r\n     * deterministic times (e.g. before the main loop starts for the first\r\n     * time, and not in response to user input or slow frame rates) to avoid\r\n     * introducing non-deterministic behavior. The update timestep should be\r\n     * the same for all players/users in multiplayer/multi-user applications.\r\n     *\r\n     * See also `MainLoop.getSimulationTimestep()`.\r\n     *\r\n     * @param {Number} timestep\r\n     *   The number of milliseconds that should be simulated by every run of\r\n     *   {@link #setUpdate update}().\r\n     */\r\n    setSimulationTimestep(timestep: number): void {\r\n        this.simulationTimestep = timestep;\r\n    }\r\n\r\n    /**\r\n     * Returns the exponential moving average of the frames per second.\r\n     *\r\n     * @return {Number}\r\n     *   The exponential moving average of the frames per second.\r\n     */\r\n    getFPS(): number {\r\n        return this.fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum frame rate.\r\n     *\r\n     * Other factors also limit the FPS; see `MainLoop.setSimulationTimestep`\r\n     * for details.\r\n     *\r\n     * See also `MainLoop.setMaxAllowedFPS()`.\r\n     *\r\n     * @return {Number}\r\n     *   The maximum number of frames per second allowed.\r\n     */\r\n    getMaxAllowedFPS(): number {\r\n        return 1000 / this.minFrameDelay;\r\n    }\r\n\r\n    /**\r\n     * Sets a maximum frame rate.\r\n     *\r\n     * See also `MainLoop.getMaxAllowedFPS()`.\r\n     *\r\n     * @param {Number} [fps=Infinity]\r\n     *   The maximum number of frames per second to execute. If Infinity or not\r\n     *   passed, there will be no FPS cap (although other factors do limit the\r\n     *   FPS; see `MainLoop.setSimulationTimestep` for details). If zero, this\r\n     *   will stop the loop, and when the loop is next started, it will return\r\n     *   to the previous maximum frame rate. Passing negative values will stall\r\n     *   the loop until this function is called again with a positive value.\r\n     *\r\n     * @chainable\r\n     */\r\n    setMaxAllowedFPS(fps: number): void {\r\n        if (typeof fps === 'undefined') {\r\n            fps = Infinity;\r\n        }\r\n        if (fps === 0) {\r\n            this.stop();\r\n        }\r\n        else {\r\n            // Dividing by Infinity returns zero.\r\n            this.minFrameDelay = 1000 / fps;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the amount of time that has not yet been simulated to zero.\r\n     *\r\n     * This introduces non-deterministic behavior if called after the\r\n     * application has started running (unless it is being reset, in which case\r\n     * it doesn't matter). However, this can be useful in cases where the\r\n     * amount of time that has not yet been simulated has grown very large\r\n     * (for example, when the application's tab gets put in the background and\r\n     * the browser throttles the timers as a result). In applications with\r\n     * lockstep the player would get dropped, but in other networked\r\n     * applications it may be necessary to snap or ease the player/user to the\r\n     * authoritative state and discard pending updates in the process. In\r\n     * non-networked applications it may also be acceptable to simply resume\r\n     * the application where it last left off and ignore the accumulated\r\n     * unsimulated time.\r\n     *\r\n     * @return {Number}\r\n     *   The cumulative amount of elapsed time in milliseconds that has not yet\r\n     *   been simulated, but is being discarded as a result of calling this\r\n     *   function.\r\n     */\r\n    resetFrameDelta() : number {\r\n        var oldFrameDelta = this.frameDelta;\r\n        this.frameDelta = 0;\r\n        return oldFrameDelta;\r\n    }\r\n\r\n    /**\r\n     * Starts the main loop.\r\n     *\r\n     * Note that the application is not considered \"running\" immediately after\r\n     * this function returns; rather, it is considered \"running\" after the\r\n     * application draws its first frame. The distinction is that event\r\n     * handlers should remain paused until the application is running, even\r\n     * after `MainLoop.start()` is called. Check `MainLoop.isRunning()` for the\r\n     * current status. To act after the application starts, register a callback\r\n     * with requestAnimationFrame() after calling this function and execute the\r\n     * action in that callback. It is safe to call `MainLoop.start()` multiple\r\n     * times even before the application starts running and without calling\r\n     * `MainLoop.stop()` in between, although there is no reason to do this;\r\n     * the main loop will only start if it is not already started.\r\n     *\r\n     * See also `MainLoop.stop()`.\r\n     */\r\n    start(): void {\r\n        if (!this.started) {\r\n            // Since the application doesn't start running immediately, track\r\n            // whether this function was called and use that to keep it from\r\n            // starting the main loop multiple times.\r\n            this.started = true;\r\n\r\n            // In the main loop, draw() is called after update(), so if we\r\n            // entered the main loop immediately, we would never render the\r\n            // initial state before any updates occur. Instead, we run one\r\n            // frame where all we do is draw, and then start the main loop with\r\n            // the next frame.\r\n            this.raf = requestAnimationFrame(this.startLoop.bind(this));\r\n        }\r\n    }\r\n\r\n    startLoop(timestamp : number): void {\r\n        // Render the initial state before any updates occur.\r\n        this.draw(1);\r\n\r\n        // The application isn't considered \"running\" until the\r\n        // application starts drawing.\r\n        this.running = true;\r\n\r\n        // Reset variables that are used for tracking time so that we\r\n        // don't simulate time passed while the application was paused.\r\n        this.lastFrameTimeMs = timestamp;\r\n        this.lastFpsUpdate = timestamp;\r\n        this.framesSinceLastFpsUpdate = 0;\r\n\r\n        // Start the main loop.\r\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Returns whether the main loop is currently running.\r\n     *\r\n     * See also `MainLoop.start()` and `MainLoop.stop()`.\r\n     *\r\n     * @return {Boolean}\r\n     *   Whether the main loop is currently running.\r\n     */\r\n    isRunning(): boolean {\r\n        return this.running;\r\n    }\r\n\r\n    /**\r\n     * Stops the main loop.\r\n     *\r\n     * Event handling and other background tasks should also be paused when the\r\n     * main loop is paused.\r\n     *\r\n     * Note that pausing in multiplayer/multi-user applications will cause the\r\n     * player's/user's client to become out of sync. In this case the\r\n     * simulation should exit, or the player/user needs to be snapped to their\r\n     * updated position when the main loop is started again.\r\n     *\r\n     * See also `MainLoop.start()` and `MainLoop.isRunning()`.\r\n     */\r\n    stop(): void {\r\n        this.running = false;\r\n        this.started = false;\r\n        window.cancelAnimationFrame(this.raf);\r\n    }\r\n\r\n    /**\r\n     * The main loop that runs updates and rendering.\r\n     * \r\n     * @param {DOMHighResTimeStamp} timestamp\r\n     * The current timestamp. In practice this is supplied by\r\n     * requestAnimationFrame at the time that it starts to fire callbacks. This\r\n     * should only be used for comparison to other timestamps because the epoch\r\n     * (i.e. the \"zero\" time) depends on the engine running this code. In engines\r\n     * that support `DOMHighResTimeStamp` (all modern browsers except iOS Safari\r\n     * 8) the epoch is the time the page started loading, specifically\r\n     * `performance.timing.navigationStart`. Everywhere else, including node.js,\r\n     * the epoch is the Unix epoch (1970-01-01T00:00:00Z).\r\n     * \r\n     * @ignore\r\n     */\r\n    animate(timestamp : number): void {\r\n        // Run the loop again the next time the browser is ready to render.\r\n        // We set rafHandle immediately so that the next frame can be canceled\r\n        // during the current frame.\r\n        this.raf = window.requestAnimationFrame(this.animate.bind(this));\r\n\r\n        // Throttle the frame rate (if minFrameDelay is set to a non-zero value by\r\n        // `MainLoop.setMaxAllowedFPS()`).\r\n        if (timestamp < this.lastFrameTimeMs + this.minFrameDelay) {\r\n            return;\r\n        }\r\n\r\n        // frameDelta is the cumulative amount of in-app time that hasn't been\r\n        // simulated yet. Add the time since the last frame. We need to track total\r\n        // not-yet-simulated time (as opposed to just the time elapsed since the\r\n        // last frame) because not all actually elapsed time is guaranteed to be\r\n        // simulated each frame. See the comments below for details.\r\n        this.frameDelta += timestamp - this.lastFrameTimeMs;\r\n        this.lastFrameTimeMs = timestamp;\r\n\r\n        // Run any updates that are not dependent on time in the simulation. See\r\n        // `MainLoop.setBegin()` for additional details on how to use this.\r\n        this.begin(timestamp, this.frameDelta);\r\n\r\n        // Update the estimate of the frame rate, `fps`. Approximately every\r\n        // second, the number of frames that occurred in that second are included\r\n        // in an exponential moving average of all frames per second. This means\r\n        // that more recent seconds affect the estimated frame rate more than older\r\n        // seconds.\r\n        if (timestamp > this.lastFpsUpdate + this.fpsUpdateInterval) {\r\n            // Compute the new exponential moving average.\r\n            this.fps =\r\n                // Divide the number of frames since the last FPS update by the\r\n                // amount of time that has passed to get the mean frames per second\r\n                // over that period. This is necessary because slightly more than a\r\n                // second has likely passed since the last update.\r\n                this.fpsAlpha * this.framesSinceLastFpsUpdate * 1000 / (timestamp - this.lastFpsUpdate) +\r\n                (1 - this.fpsAlpha) * this.fps;\r\n\r\n            // Reset the frame counter and last-updated timestamp since their\r\n            // latest values have now been incorporated into the FPS estimate.\r\n            this.lastFpsUpdate = timestamp;\r\n            this.framesSinceLastFpsUpdate = 0;\r\n        }\r\n        // Count the current frame in the next frames-per-second update. This\r\n        // happens after the previous section because the previous section\r\n        // calculates the frames that occur up until `timestamp`, and `timestamp`\r\n        // refers to a time just before the current frame was delivered.\r\n        this.framesSinceLastFpsUpdate++;\r\n\r\n        /*\r\n         * A naive way to move an object along its X-axis might be to write a main\r\n         * loop containing the statement `obj.x += 10;` which would move the object\r\n         * 10 units per frame. This approach suffers from the issue that it is\r\n         * dependent on the frame rate. In other words, if your application is\r\n         * running slowly (that is, fewer frames per second), your object will also\r\n         * appear to move slowly, whereas if your application is running quickly\r\n         * (that is, more frames per second), your object will appear to move\r\n         * quickly. This is undesirable, especially in multiplayer/multi-user\r\n         * applications.\r\n         *\r\n         * One solution is to multiply the speed by the amount of time that has\r\n         * passed between rendering frames. For example, if you want your object to\r\n         * move 600 units per second, you might write `obj.x += 600 * delta`, where\r\n         * `delta` is the time passed since the last frame. (For convenience, let's\r\n         * move this statement to an update() function that takes `delta` as a\r\n         * parameter.) This way, your object will move a constant distance over\r\n         * time. However, at low frame rates and high speeds, your object will move\r\n         * large distances every frame, which can cause it to do strange things\r\n         * such as move through walls. Additionally, we would like our program to\r\n         * be deterministic. That is, every time we run the application with the\r\n         * same input, we would like exactly the same output. If the time between\r\n         * frames (the `delta`) varies, our output will diverge the longer the\r\n         * program runs due to accumulated rounding errors, even at normal frame\r\n         * rates.\r\n         *\r\n         * A better solution is to separate the amount of time simulated in each\r\n         * update() from the amount of time between frames. Our update() function\r\n         * doesn't need to change; we just need to change the delta we pass to it\r\n         * so that each update() simulates a fixed amount of time (that is, `delta`\r\n         * should have the same value each time update() is called). The update()\r\n         * function can be run multiple times per frame if needed to simulate the\r\n         * total amount of time passed since the last frame. (If the time that has\r\n         * passed since the last frame is less than the fixed simulation time, we\r\n         * just won't run an update() until the the next frame. If there is\r\n         * unsimulated time left over that is less than our timestep, we'll just\r\n         * leave it to be simulated during the next frame.) This approach avoids\r\n         * inconsistent rounding errors and ensures that there are no giant leaps\r\n         * through walls between frames.\r\n         *\r\n         * That is what is done below. It introduces a new problem, but it is a\r\n         * manageable one: if the amount of time spent simulating is consistently\r\n         * longer than the amount of time between frames, the application could\r\n         * freeze and crash in a spiral of death. This won't happen as long as the\r\n         * fixed simulation time is set to a value that is high enough that\r\n         * update() calls usually take less time than the amount of time they're\r\n         * simulating. If it does start to happen anyway, see `MainLoop.setEnd()`\r\n         * for a discussion of ways to stop it.\r\n         *\r\n         * Additionally, see `MainLoop.setUpdate()` for a discussion of performance\r\n         * considerations.\r\n         *\r\n         * Further reading for those interested:\r\n         *\r\n         * - http://gameprogrammingpatterns.com/game-loop.html\r\n         * - http://gafferongames.com/game-physics/fix-your-timestep/\r\n         * - https://gamealchemist.wordpress.com/2013/03/16/thoughts-on-the-javascript-game-loop/\r\n         * - https://developer.mozilla.org/en-US/docs/Games/Anatomy\r\n         */\r\n        this.numUpdateSteps = 0;\r\n        while (this.frameDelta >= this.simulationTimestep) {\r\n            this.update(this.simulationTimestep);\r\n            this.frameDelta -= this.simulationTimestep;\r\n\r\n            /*\r\n             * Sanity check: bail if we run the loop too many times.\r\n             *\r\n             * One way this could happen is if update() takes longer to run than\r\n             * the time it simulates, thereby causing a spiral of death. For ways\r\n             * to avoid this, see `MainLoop.setEnd()`. Another way this could\r\n             * happen is if the browser throttles serving frames, which typically\r\n             * occurs when the tab is in the background or the device battery is\r\n             * low. An event outside of the main loop such as audio processing or\r\n             * synchronous resource reads could also cause the application to hang\r\n             * temporarily and accumulate not-yet-simulated time as a result.\r\n             *\r\n             * 240 is chosen because, for any sane value of simulationTimestep, 240\r\n             * updates will simulate at least one second, and it will simulate four\r\n             * seconds with the default value of simulationTimestep. (Safari\r\n             * notifies users that the script is taking too long to run if it takes\r\n             * more than five seconds.)\r\n             *\r\n             * If there are more updates to run in a frame than this, the\r\n             * application will appear to slow down to the user until it catches\r\n             * back up. In networked applications this will usually cause the user\r\n             * to get out of sync with their peers, but if the updates are taking\r\n             * this long already, they're probably already out of sync.\r\n             */\r\n            if (++this.numUpdateSteps >= 240) {\r\n                this.panic = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * Render the screen. We do this regardless of whether update() has run\r\n         * during this frame because it is possible to interpolate between updates\r\n         * to make the frame rate appear faster than updates are actually\r\n         * happening. See `MainLoop.setDraw()` for an explanation of how to do\r\n         * that.\r\n         *\r\n         * We draw after updating because we want the screen to reflect a state of\r\n         * the application that is as up-to-date as possible. (`MainLoop.start()`\r\n         * draws the very first frame in the application's initial state, before\r\n         * any updates have occurred.) Some sources speculate that rendering\r\n         * earlier in the requestAnimationFrame callback can get the screen painted\r\n         * faster; this is mostly not true, and even when it is, it's usually just\r\n         * a trade-off between rendering the current frame sooner and rendering the\r\n         * next frame later.\r\n         *\r\n         * See `MainLoop.setDraw()` for details about draw() itself.\r\n         */\r\n        this.draw(this.frameDelta / this.simulationTimestep);\r\n\r\n        // Run any updates that are not dependent on time in the simulation. See\r\n        // `MainLoop.setEnd()` for additional details on how to use this.\r\n        this.end(this.fps, this.panic);\r\n\r\n        this.panic = false;\r\n    }\r\n\r\n    // SUBCLASSES MUST OVERRIDE FOUR REQUIRED METHODS:\r\n        // begin\r\n        // update\r\n        // draw\r\n        // end\r\n\r\n    /**\r\n     * A function that runs at the beginning of the main loop.\r\n     *\r\n     * The begin() function is typically used to process input before the\r\n     * updates run. Processing input here (in chunks) can reduce the running\r\n     * time of event handlers, which is useful because long-running event\r\n     * handlers can sometimes delay frames.\r\n     *\r\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\r\n     * frame, begin() always runs exactly once per frame. This makes it useful\r\n     * for any updates that are not dependent on time in the simulation.\r\n     * Examples include adjusting HUD calculations or performing long-running\r\n     * updates incrementally. Compared to {@link #setEnd end}(), generally\r\n     * actions should occur in begin() if they affect anything that\r\n     * {@link #setUpdate update}() or {@link #setDraw draw}() use.\r\n     *\r\n     * @param {Function} begin\r\n     *   The begin() function.\r\n     * @param {Number} [begin.timestamp]\r\n     *   The current timestamp (when the frame started), in milliseconds. This\r\n     *   should only be used for comparison to other timestamps because the\r\n     *   epoch (i.e. the \"zero\" time) depends on the engine running this code.\r\n     *   In engines that support `DOMHighResTimeStamp` (all modern browsers\r\n     *   except iOS Safari 8) the epoch is the time the page started loading,\r\n     *   specifically `performance.timing.navigationStart`. Everywhere else,\r\n     *   including node.js, the epoch is the Unix epoch (1970-01-01T00:00:00Z).\r\n     * @param {Number} [begin.delta]\r\n     *   The total elapsed time that has not yet been simulated, in\r\n     *   milliseconds.\r\n     */\r\n    abstract begin(timestamp : number, delta : number) : void;\r\n\r\n    /**\r\n     * A function that runs updates (i.e. AI and physics).\r\n     *\r\n     * The update() function should simulate anything that is affected by time.\r\n     * It can be called zero or more times per frame depending on the frame\r\n     * rate.\r\n     *\r\n     * As with everything in the main loop, the running time of update()\r\n     * directly affects the frame rate. If update() takes long enough that the\r\n     * frame rate drops below the target (\"budgeted\") frame rate, parts of the\r\n     * update() function that do not need to execute between every frame can be\r\n     * moved into Web Workers. (Various sources on the internet sometimes\r\n     * suggest other scheduling patterns using setTimeout() or setInterval().\r\n     * These approaches sometimes offer modest improvements with minimal\r\n     * changes to existing code, but because JavaScript is single-threaded, the\r\n     * updates will still block rendering and drag down the frame rate. Web\r\n     * Workers execute in separate threads, so they free up more time in the\r\n     * main loop.)\r\n     *\r\n     * This script can be imported into a Web Worker using importScripts() and\r\n     * used to run a second main loop in the worker. Some considerations:\r\n     *\r\n     * - Profile your code before doing the work to move it into Web Workers.\r\n     *   It could be the rendering that is the bottleneck, in which case the\r\n     *   solution is to decrease the visual complexity of the scene.\r\n     * - It doesn't make sense to move the *entire* contents of update() into\r\n     *   workers unless {@link #setDraw draw}() can interpolate between frames.\r\n     *   The lowest-hanging fruit is background updates (like calculating\r\n     *   citizens' happiness in a city-building game), physics that doesn't\r\n     *   affect the scene (like flags waving in the wind), and anything that is\r\n     *   occluded or happening far off screen.\r\n     * - If draw() needs to interpolate physics based on activity that occurs\r\n     *   in a worker, the worker needs to pass the interpolation value back to\r\n     *   the main thread so that is is available to draw().\r\n     * - Web Workers can't access the state of the main thread, so they can't\r\n     *   directly modify objects in your scene. Moving data to and from Web\r\n     *   Workers is a pain. The fastest way to do it is with Transferable\r\n     *   Objects: basically, you can pass an ArrayBuffer to a worker,\r\n     *   destroying the original reference in the process.\r\n     *\r\n     * You can read more about Web Workers and Transferable Objects at\r\n     * [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/workers/basics/).\r\n     *\r\n     * @param {Function} update\r\n     *   The update() function.\r\n     * @param {Number} [update.delta]\r\n     *   The amount of time in milliseconds to simulate in the update. In most\r\n     *   cases this timestep never changes in order to ensure deterministic\r\n     *   updates. The timestep is the same as that returned by\r\n     *   `MainLoop.getSimulationTimestep()`.\r\n     */\r\n    abstract update(timeStep : number) : void;\r\n\r\n    /**\r\n     * A function that draws things on the screen.\r\n     *\r\n     * The draw() function gets passed the percent of time that the next run of\r\n     * {@link #setUpdate update}() will simulate that has actually elapsed, as\r\n     * a decimal. In other words, draw() gets passed how far between update()\r\n     * calls it is. This is useful because the time simulated by update() and\r\n     * the time between draw() calls is usually different, so the parameter to\r\n     * draw() can be used to interpolate motion between frames to make\r\n     * rendering appear smoother. To illustrate, if update() advances the\r\n     * simulation at each vertical bar in the first row below, and draw() calls\r\n     * happen at each vertical bar in the second row below, then some frames\r\n     * will have time left over that is not yet simulated by update() when\r\n     * rendering occurs in draw():\r\n     *\r\n     *     update() timesteps:  |  |  |  |  |  |  |  |  |\r\n     *     draw() calls:        |   |   |   |   |   |   |\r\n     *\r\n     * To interpolate motion for rendering purposes, objects' state after the\r\n     * last update() must be retained and used to calculate an intermediate\r\n     * state. Note that this means renders will be up to one update() behind.\r\n     * This is still better than extrapolating (projecting objects' state after\r\n     * a future update()) which can produce bizarre results. Storing multiple\r\n     * states can be difficult to set up, and keep in mind that running this\r\n     * process takes time that could push the frame rate down, so it's often\r\n     * not worthwhile unless stuttering is visible.\r\n     *\r\n     * @param {Function} draw\r\n     *   The draw() function.\r\n     * @param {Number} [draw.interpolationPercentage]\r\n     *   The cumulative amount of time that hasn't been simulated yet, divided\r\n     *   by the amount of time that will be simulated the next time update()\r\n     *   runs. Useful for interpolating frames.\r\n     */\r\n    public abstract draw(interpolationPercentage : number) : void;\r\n\r\n    /**\r\n     * A function that runs at the end of the main loop.\r\n     *\r\n     * Unlike {@link #setUpdate update}(), which can run zero or more times per\r\n     * frame, end() always runs exactly once per frame. This makes it useful\r\n     * for any updates that are not dependent on time in the simulation.\r\n     * Examples include cleaning up any temporary state set up by\r\n     * {@link #setBegin begin}(), lowering the visual quality if the frame rate\r\n     * is too low, or performing long-running updates incrementally. Compared\r\n     * to begin(), generally actions should occur in end() if they use anything\r\n     * that update() or {@link #setDraw draw}() affect.\r\n     *\r\n     * @param {Function} end\r\n     *   The end() function.\r\n     * @param {Number} [end.fps]\r\n     *   The exponential moving average of the frames per second. This is the\r\n     *   same value returned by `MainLoop.getFPS()`. It can be used to take\r\n     *   action when the FPS is too low (or to restore to normalcy if the FPS\r\n     *   moves back up). Examples of actions to take if the FPS is too low\r\n     *   include exiting the application, lowering the visual quality, stopping\r\n     *   or reducing activities outside of the main loop like event handlers or\r\n     *   audio playback, performing non-critical updates less frequently, or\r\n     *   increasing the simulation timestep (by calling\r\n     *   `MainLoop.setSimulationTimestep()`). Note that this last option\r\n     *   results in more time being simulated per update() call, which causes\r\n     *   the application to behave non-deterministically.\r\n     * @param {Boolean} [end.panic=false]\r\n     *   Indicates whether the simulation has fallen too far behind real time.\r\n     *   Specifically, `panic` will be `true` if too many updates occurred in\r\n     *   one frame. In networked lockstep applications, the application should\r\n     *   wait for some amount of time to see if the user can catch up before\r\n     *   dropping the user. In networked but non-lockstep applications, this\r\n     *   typically indicates that the user needs to be snapped or eased to the\r\n     *   current authoritative state. When this happens, it may be convenient\r\n     *   to call `MainLoop.resetFrameDelta()` to discard accumulated pending\r\n     *   updates. In non-networked applications, it may be acceptable to allow\r\n     *   the application to keep running for awhile to see if it will catch up.\r\n     *   However, this could also cause the application to look like it is\r\n     *   running very quickly for a few frames as it transitions through the\r\n     *   intermediate states. An alternative that may be acceptable is to\r\n     *   simply ignore the unsimulated elapsed time by calling\r\n     *   `MainLoop.resetFrameDelta()` even though this introduces\r\n     *   non-deterministic behavior. In all cases, if the application panics\r\n     *   frequently, this is an indication that the main loop is running too\r\n     *   slowly. However, most of the time the drop in frame rate will probably\r\n     *   be noticeable before a panic occurs. To help the application catch up\r\n     *   after a panic caused by a spiral of death, the same steps can be taken\r\n     *   that are suggested above if the FPS drops too low.\r\n     */\r\n    abstract end(fps : number, panic : boolean) : void;\r\n}","/*\r\n * MathUtilities provides a number of services for rendering using 4x4 matrices, like\r\n * transformting (i.e. translation, rotation, and scaling) 3d or 2d points from world\r\n * coordinate systems to screen coordinate systems.\r\n */\r\nimport {Matrix} from './Matrix'\r\nimport {Vector3} from './Vector3'\r\n\r\nexport namespace MathUtilities {\r\n    export function determinant4x4(result : Matrix) : number {\r\n        let det0 = result.get(0, 0) * (\r\n            (result.get(1, 1) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\r\n            - (result.get(1, 2) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\r\n            + (result.get(1, 3) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(3, 1) * result.get(2, 2)))));\r\n        let det1 = result.get(0, 1) * (\r\n            (result.get(1, 0) * ((result.get(2, 2) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 2))))\r\n            - (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(3, 0) * result.get(2, 3))))\r\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(3, 0) * result.get(2, 2)))));\r\n        let det2 = result.get(0, 2) * (\r\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 1))))\r\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 3)) - (result.get(2, 3) * result.get(3, 0))))\r\n            + (result.get(1, 3) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\r\n        let det3 = result.get(0, 3) * (\r\n            (result.get(1, 0) * ((result.get(2, 1) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 1))))\r\n            - (result.get(1, 1) * ((result.get(2, 0) * result.get(3, 2)) - (result.get(2, 2) * result.get(3, 0))))\r\n            + (result.get(1, 2) * ((result.get(2, 0) * result.get(3, 1)) - (result.get(2, 1) * result.get(3, 0)))));\r\n        let det = det0 - det1 + det2 - det3;\r\n        console.log(\"det = \" + det0 + \" + \" + det1 + \" + \" + det2 + \" + \" + det3);\r\n        return det;\r\n    }\r\n    export function identity(result : Matrix) : void {\r\n        if (result.getRows() === result.getColumns()) {\r\n            for (let i = 0; i < result.getRows(); i++) {\r\n                for (let j = 0; j < result.getColumns(); j++) {\r\n                    if (i === j)\r\n                        result.set(1.0, i, j);\r\n                    else\r\n                        result.set(0.0, i, j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    export function inverse(result : Matrix, mat : Matrix) : void {\r\n        let det = this.determinant(mat);\r\n        let m00 = mat.get(0, 0); let m01 = mat.get(0, 1); let m02 = mat.get(0, 2); let m03 = mat.get(0, 3);\r\n        let m10 = mat.get(1, 0); let m11 = mat.get(1, 1); let m12 = mat.get(1, 2); let m13 = mat.get(1, 3);\r\n        let m20 = mat.get(2, 0); let m21 = mat.get(2, 1); let m22 = mat.get(2, 2); let m23 = mat.get(2, 3);\r\n        let m30 = mat.get(3, 0); let m31 = mat.get(3, 1); let m32 = mat.get(3, 2); let m33 = mat.get(3, 3);\r\n        let temp = new Matrix(4, 4);\r\n        temp.set((m12 * m23 * m31) - (m13 * m22 * m31) + (m13 * m21 * m32) - (m11 * m23 * m32) - (m12 * m21 * m33) + (m11 * m22 * m33), 0, 0);\r\n        temp.set((m03 * m22 * m31) - (m02 * m23 * m31) - (m03 * m21 * m32) + (m01 * m23 * m32) + (m02 * m21 * m33) - (m01 * m22 * m33), 0, 1);\r\n        temp.set((m02 * m13 * m31) - (m03 * m12 * m31) + (m03 * m11 * m32) - (m01 * m13 * m32) - (m02 * m11 * m33) + (m01 * m12 * m33), 0, 2);\r\n        temp.set((m03 * m12 * m21) - (m02 * m13 * m21) - (m03 * m11 * m22) + (m01 * m13 * m22) + (m02 * m11 * m23) - (m01 * m12 * m23), 0, 3);\r\n        temp.set((m13 * m22 * m30) - (m12 * m23 * m30) - (m13 * m20 * m32) + (m10 * m23 * m32) + (m12 * m20 * m33) - (m10 * m22 * m33), 1, 0);\r\n        temp.set((m02 * m23 * m30) - (m03 * m22 * m30) + (m03 * m20 * m32) - (m00 * m23 * m32) - (m02 * m20 * m33) + (m00 * m22 * m33), 1, 1);\r\n        temp.set((m03 * m12 * m30) - (m02 * m13 * m30) - (m03 * m10 * m32) + (m00 * m13 * m32) + (m02 * m10 * m33) - (m00 * m12 * m33), 1, 2);\r\n        temp.set((m02 * m13 * m20) - (m03 * m12 * m20) + (m03 * m10 * m22) - (m00 * m13 * m22) - (m02 * m10 * m23) + (m00 * m12 * m23), 1, 3);\r\n        temp.set((m11 * m23 * m30) - (m13 * m21 * m30) + (m13 * m20 * m31) - (m10 * m23 * m31) - (m11 * m20 * m33) + (m10 * m21 * m33), 2, 0);\r\n        temp.set((m03 * m21 * m30) - (m01 * m23 * m30) - (m03 * m20 * m31) + (m00 * m23 * m31) + (m01 * m20 * m33) - (m00 * m21 * m33), 2, 1);\r\n        temp.set((m01 * m13 * m30) - (m03 * m11 * m30) + (m03 * m10 * m31) - (m00 * m13 * m31) - (m01 * m10 * m33) + (m00 * m11 * m33), 2, 2);\r\n        temp.set((m03 * m11 * m20) - (m01 * m13 * m20) - (m03 * m10 * m21) + (m00 * m13 * m21) + (m01 * m10 * m23) - (m00 * m11 * m23), 2, 3);\r\n        temp.set((m12 * m21 * m30) - (m11 * m22 * m30) - (m12 * m20 * m31) + (m10 * m22 * m31) + (m11 * m20 * m32) - (m10 * m21 * m32), 3, 0);\r\n        temp.set((m01 * m22 * m30) - (m02 * m21 * m30) + (m02 * m20 * m31) - (m00 * m22 * m31) - (m01 * m20 * m32) + (m00 * m21 * m32), 3, 1);\r\n        temp.set((m02 * m11 * m30) - (m01 * m12 * m30) - (m02 * m10 * m31) + (m00 * m12 * m31) + (m01 * m10 * m32) - (m00 * m11 * m32), 3, 2);\r\n        temp.set((m01 * m12 * m20) - (m02 * m11 * m20) + (m02 * m10 * m21) - (m00 * m12 * m21) - (m01 * m10 * m22) + (m00 * m11 * m22), 3, 3);\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                result.set(temp.get(i, j) / det, i, j);\r\n            }\r\n        }\r\n    }\r\n    export function model(result : Matrix, translation : Vector3, rotation : Vector3, scale : Vector3) : void {\r\n        // TRANSLATION MATRIX\t\r\n        let translationMatrix = new Matrix(4, 4);\r\n        this.identity(translationMatrix);\r\n        this.translate(translationMatrix, translation);\r\n\r\n        // ROTATION MATRIX\r\n        let rotationMatrix = new Matrix(4, 4);\r\n        this.identity(rotationMatrix);\r\n        this.rotate(rotationMatrix, rotation);\r\n\r\n        // SCALING MATRIX\r\n        let scaleMatrix = new Matrix(4, 4);\r\n        this.identity(scaleMatrix);\r\n        this.scale(scaleMatrix, scale);\r\n\r\n        // AND NOW MULTIPLY THEM TOGETHER IN THE CORRECT ORDER\r\n        let tempMatrix = new Matrix(4, 4);\r\n        this.multiply(tempMatrix, translationMatrix, rotationMatrix);\r\n        this.multiply(result, tempMatrix, scaleMatrix);\r\n    }\r\n\r\n    export function multiply(result : Matrix, mat0 : Matrix, mat1 : Matrix) : void {\r\n        // result MIGHT BE mat0 OR mat1 SO IT'S BEST IF WE\r\n        // CALCULATE TEMP VALUES FIRST BEFORE ASSIGNMENT\r\n        let r00 = (mat0.get(0, 0) * mat1.get(0, 0))\r\n            + (mat0.get(0, 1) * mat1.get(1, 0))\r\n            + (mat0.get(0, 2) * mat1.get(2, 0))\r\n            + (mat0.get(0, 3) * mat1.get(3, 0));\r\n        let r10 = (mat0.get(1, 0) * mat1.get(0, 0))\r\n            + (mat0.get(1, 1) * mat1.get(1, 0))\r\n            + (mat0.get(1, 2) * mat1.get(2, 0))\r\n            + (mat0.get(1, 3) * mat1.get(3, 0));\r\n        let r20 = (mat0.get(2, 0) * mat1.get(0, 0))\r\n            + (mat0.get(2, 1) * mat1.get(1, 0))\r\n            + (mat0.get(2, 2) * mat1.get(2, 0))\r\n            + (mat0.get(2, 3) * mat1.get(3, 0));\r\n        let r30 = (mat0.get(3, 0) * mat1.get(0, 0))\r\n            + (mat0.get(3, 1) * mat1.get(1, 0))\r\n            + (mat0.get(3, 2) * mat1.get(2, 0))\r\n            + (mat0.get(3, 3) * mat1.get(3, 0));\r\n        let r01 = (mat0.get(0, 0) * mat1.get(0, 1))\r\n            + (mat0.get(0, 1) * mat1.get(1, 1))\r\n            + (mat0.get(0, 2) * mat1.get(2, 1))\r\n            + (mat0.get(0, 3) * mat1.get(3, 1));\r\n        let r11 = (mat0.get(1, 0) * mat1.get(0, 1))\r\n            + (mat0.get(1, 1) * mat1.get(1, 1))\r\n            + (mat0.get(1, 2) * mat1.get(2, 1))\r\n            + (mat0.get(1, 3) * mat1.get(3, 1));\r\n        let r21 = (mat0.get(2, 0) * mat1.get(0, 1))\r\n            + (mat0.get(2, 1) * mat1.get(1, 1))\r\n            + (mat0.get(2, 2) * mat1.get(2, 1))\r\n            + (mat0.get(2, 3) * mat1.get(3, 1));\r\n        let r31 = (mat0.get(3, 0) * mat1.get(0, 1))\r\n            + (mat0.get(3, 1) * mat1.get(1, 1))\r\n            + (mat0.get(3, 2) * mat1.get(2, 1))\r\n            + (mat0.get(3, 3) * mat1.get(3, 1));\r\n        let r02 = (mat0.get(0, 0) * mat1.get(0, 2))\r\n            + (mat0.get(0, 1) * mat1.get(1, 2))\r\n            + (mat0.get(0, 2) * mat1.get(2, 2))\r\n            + (mat0.get(0, 3) * mat1.get(3, 2));\r\n        let r12 = (mat0.get(1, 0) * mat1.get(0, 2))\r\n            + (mat0.get(1, 1) * mat1.get(1, 2))\r\n            + (mat0.get(1, 2) * mat1.get(2, 2))\r\n            + (mat0.get(1, 3) * mat1.get(3, 2));\r\n        let r22 = (mat0.get(2, 0) * mat1.get(0, 2))\r\n            + (mat0.get(2, 1) * mat1.get(1, 2))\r\n            + (mat0.get(2, 2) * mat1.get(2, 2))\r\n            + (mat0.get(2, 3) * mat1.get(3, 2));\r\n        let r32 = (mat0.get(3, 0) * mat1.get(0, 2))\r\n            + (mat0.get(3, 1) * mat1.get(1, 2))\r\n            + (mat0.get(3, 2) * mat1.get(2, 2))\r\n            + (mat0.get(3, 3) * mat1.get(3, 2));\r\n        let r03 = (mat0.get(0, 0) * mat1.get(0, 3))\r\n            + (mat0.get(0, 1) * mat1.get(1, 3))\r\n            + (mat0.get(0, 2) * mat1.get(2, 3))\r\n            + (mat0.get(0, 3) * mat1.get(3, 3));\r\n        let r13 = (mat0.get(1, 0) * mat1.get(0, 3))\r\n            + (mat0.get(1, 1) * mat1.get(1, 3))\r\n            + (mat0.get(1, 2) * mat1.get(2, 3))\r\n            + (mat0.get(1, 3) * mat1.get(3, 3));\r\n        let r23 = (mat0.get(2, 0) * mat1.get(0, 3))\r\n            + (mat0.get(2, 1) * mat1.get(1, 3))\r\n            + (mat0.get(2, 2) * mat1.get(2, 3))\r\n            + (mat0.get(2, 3) * mat1.get(3, 3));\r\n        let r33 = (mat0.get(3, 0) * mat1.get(0, 3))\r\n            + (mat0.get(3, 1) * mat1.get(1, 3))\r\n            + (mat0.get(3, 2) * mat1.get(2, 3))\r\n            + (mat0.get(3, 3) * mat1.get(3, 3));\r\n\r\n        // NOW PUT ALL THE CALCULATED VALUES IN THE result MATRIX\r\n        result.set(r00, 0, 0);\r\n        result.set(r10, 1, 0);\r\n        result.set(r20, 2, 0);\r\n        result.set(r30, 3, 0);\r\n        result.set(r01, 0, 1);\r\n        result.set(r11, 1, 1);\r\n        result.set(r21, 2, 1);\r\n        result.set(r31, 3, 1);\r\n        result.set(r02, 0, 2);\r\n        result.set(r12, 1, 2);\r\n        result.set(r22, 2, 2);\r\n        result.set(r32, 3, 2);\r\n        result.set(r03, 0, 3);\r\n        result.set(r13, 1, 3);\r\n        result.set(r23, 2, 3);\r\n        result.set(r33, 3, 3);\r\n    }\r\n\r\n    export function projection(result : Matrix, nearZ : number, farZ : number, viewportWidth : number, viewportHeight : number, fovY : number) : void {\r\n        let aspectRatio = viewportWidth / viewportHeight;\r\n        let fieldOfViewY = this.math.degreesToRadians(fovY);\r\n        let fieldOfViewX = 2 * Math.atan(Math.tan(fieldOfViewY / 2) * aspectRatio);\r\n\r\n        // WE'LL USE THESE AS SHORTHAND FOR LOADING OUR MATRIX\r\n        let n = nearZ;\r\n        let f = farZ;\r\n        let r = Math.tan(fieldOfViewX / 2) * n;\r\n        let t = Math.tan(fieldOfViewY / 2) * n;\r\n\r\n        // 0-3\r\n        result.set(n / r, 0, 0);\r\n        result.set(0.0, 0, 1);\r\n        result.set(0.0, 0, 2);\r\n        result.set(0.0, 0, 3);\r\n        // 4-7\r\n        result.set(0.0, 1, 0);\r\n        result.set(n / t, 1, 1);\r\n        result.set(0.0, 1, 2);\r\n        result.set(0.0, 1, 3);\r\n        // 8-11\r\n        result.set(0.0, 2, 0);\r\n        result.set(0.0, 2, 1);\r\n        result.set((-(f + n)) / (f - n), 2, 2);\r\n        result.set((-2 * f * n) / (f - n), 2, 3);\r\n        // 12-15 \r\n        result.set(0.0, 3, 0);\r\n        result.set(0.0, 3, 1);\r\n        result.set(-1.0, 3, 2);\r\n        result.set(0.0, 3, 3);\r\n    }\r\n\r\n    export function rotate(result : Matrix, rotationVector : Vector3) : void {\r\n        // START WITH THE X-AXIS ROTATION\r\n        let xRotationMatrix = new Matrix(4, 4);\r\n        this.identity(xRotationMatrix);\r\n        let thetaX = rotationVector.getThetaX();\r\n        xRotationMatrix.set(Math.cos(thetaX), 1, 1);\r\n        xRotationMatrix.set(Math.sin(thetaX), 2, 1);\r\n        xRotationMatrix.set(-1 * Math.sin(thetaX), 1, 2);\r\n        xRotationMatrix.set(Math.cos(thetaX), 2, 2);\r\n\r\n        // START WITH THE Y-AXIS ROTATION\r\n        let yRotationMatrix = new Matrix(4, 4);\r\n        this.identity(yRotationMatrix);\r\n        let thetaY = rotationVector.getThetaY();\r\n        yRotationMatrix.set(Math.cos(thetaY), 0, 0);\r\n        yRotationMatrix.set(-1 * Math.sin(thetaY), 2, 0);\r\n        yRotationMatrix.set(Math.sin(thetaY), 0, 2);\r\n        yRotationMatrix.set(Math.cos(thetaY), 2, 2);\r\n\r\n        // START WITH THE Z-AXIS ROTATION\r\n        let zRotationMatrix = new Matrix(4, 4);\r\n        this.identity(zRotationMatrix);\r\n        let thetaZ = rotationVector.getThetaZ();\r\n        zRotationMatrix.set(Math.cos(thetaZ), 0, 0);\r\n        zRotationMatrix.set(Math.sin(thetaZ), 1, 0);\r\n        zRotationMatrix.set(-1 * Math.sin(thetaZ), 0, 1);\r\n        zRotationMatrix.set(Math.cos(thetaZ), 1, 1);\r\n\r\n        // START WITH THE X-AXIS ROTATION\r\n        let tempMatrix = new Matrix(4, 4);\r\n        this.identity(tempMatrix);\r\n        this.multiply(tempMatrix, xRotationMatrix, yRotationMatrix);\r\n        this.multiply(result, tempMatrix, zRotationMatrix);\r\n    }\r\n\r\n    export function scale(result : Matrix, scaleVector : Vector3) : void {\r\n        // START WITH THE IDENTITY MATRIX\r\n        this.identity(result, scaleVector);\r\n\r\n        // AND THEN LOAD IN THE TRANSLATION VALUES\r\n        result.set(scaleVector.getX(), 0, 0);\r\n        result.set(scaleVector.getY(), 1, 1);\r\n        result.set(scaleVector.getZ(), 2, 2);\r\n    }\r\n\r\n    export function transform(result : Vector3, mat : Matrix, vec : Vector3) : void {\r\n        result.setX((mat.get(0, 0) * vec.getX()) + (mat.get(0, 1) * vec.getY()) + (mat.get(0, 2) * vec.getZ()) + (mat.get(0, 3) * vec.getW()));\r\n        result.setY((mat.get(1, 0) * vec.getX()) + (mat.get(1, 1) * vec.getY()) + (mat.get(1, 2) * vec.getZ()) + (mat.get(1, 3) * vec.getW()));\r\n        result.setZ((mat.get(2, 0) * vec.getX()) + (mat.get(2, 1) * vec.getY()) + (mat.get(2, 2) * vec.getZ()) + (mat.get(2, 3) * vec.getW()));\r\n        result.setW((mat.get(3, 0) * vec.getX()) + (mat.get(3, 1) * vec.getY()) + (mat.get(3, 2) * vec.getZ()) + (mat.get(3, 3) * vec.getW()));\r\n    }\r\n\r\n    export function translate(result : Matrix, translationVector : Vector3) : void {\r\n        // START WITH THE IDENTITY MATRIX\r\n        this.identity(result);\r\n\r\n        // AND THEN LOAD IN THE TRANSLATION VALUES\r\n        result.set(translationVector.getX(), 0, 3);\r\n        result.set(translationVector.getY(), 1, 3);\r\n        result.set(translationVector.getZ(), 2, 3);\r\n    }\r\n\r\n    export function transpose(result : Matrix, mat : Matrix) : void {\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let temp = mat.get(i, j);\r\n                result.set(temp, j, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    export function view(result : Matrix, cameraPosition : Vector3, cameraOrientation : Vector3) : void {\r\n        let pitch = this.math.degreesToRadians(cameraOrientation.getThetaX());\r\n        let yaw = this.math.degreesToRadians(cameraOrientation.getThetaY());\r\n        let roll = this.math.degreesToRadians(cameraOrientation.getThetaZ());\r\n\r\n        // TO TRANSLATE\r\n        let translateVector = this.math.vectorMath.createPositionVector();\r\n        translateVector.set(-cameraPosition.getX(), -cameraPosition.getY(), -cameraPosition.getZ());\r\n        let translateMatrix = new Matrix(4, 4);\r\n        this.identity(translateMatrix);\r\n        this.translate(translateMatrix, translateVector);\r\n\r\n        // TO ROTATE\r\n        let rotateVector = this.math.vectorMath.createRotationVector();\r\n        rotateVector.set(-pitch, -yaw, -roll);\r\n        let rotateMatrix = new Matrix(4, 4);\r\n        this.rotate(rotateMatrix, rotateVector);\r\n\r\n        // NOW COMBINE THE 2 MATRICES\r\n        this.multiply(result, rotateMatrix, translateMatrix);\r\n    }\r\n\r\n    export function addVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        for (let i = 0; i < vec0.getSize(); i++) {\r\n            let total = vec0.getAt(i) + vec1.getAt(i);\r\n            result.setAt(i, total);\r\n        }\r\n    }\r\n\r\n    export function crossProduct(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        let result0 = (vec0.getY() * vec1.getZ())\r\n            - (vec1.getY() * vec0.getZ());\r\n        let result1 = (vec0.getZ() * vec1.getX())\r\n            - (vec1.getZ() * vec0.getX());\r\n        let result2 = (vec0.getX() * vec1.getY())\r\n            - (vec1.getX() * vec0.getY());\r\n        result.setX(result0);\r\n        result.setY(result1);\r\n        result.setZ(result2);\r\n    }\r\n\r\n    export function dotProduct(vec0 : Vector3, vec1 : Vector3) : number {\r\n        let resultX = vec0.getX() * vec1.getX();\r\n        let resultY = vec0.getY() * vec1.getY();\r\n        let resultZ = vec0.getZ() * vec1.getZ();\r\n        return resultX + resultY + resultZ;\r\n    }\r\n\r\n    export function multiplyVectors(result : Vector3, vec : Vector3, scalar : number) : void {\r\n        let vecX = vec.getX() * scalar;\r\n        let vecY = vec.getY() * scalar;\r\n        let vecZ = vec.getZ() * scalar;\r\n        result.setX(vecX);\r\n        result.setY(vecY);\r\n        result.setZ(vecZ);\r\n    }\r\n\r\n    export function normalize(result : Vector3, vec : Vector3) : void {\r\n        let xSquared = vec.getX() * vec.getX();\r\n        let ySquared = vec.getY() * vec.getY();\r\n        let zSquared = vec.getZ() * vec.getZ();\r\n        let distance = Math.sqrt(xSquared + ySquared + zSquared);\r\n        result.setX(vec.getX() / distance);\r\n        result.setY(vec.getY() / distance);\r\n        result.setZ(vec.getZ() / distance);\r\n    }\r\n\r\n    export function subtractVectors(result : Vector3, vec0 : Vector3, vec1 : Vector3) : void {\r\n        let resultX = vec0.getX() - vec1.getX();\r\n        let resultY = vec0.getY() - vec1.getY();\r\n        let resultZ = vec0.getZ() - vec1.getZ();\r\n        result.setX(resultX);\r\n        result.setY(resultY);\r\n        result.setZ(resultZ);\r\n    }\r\n}","/*\r\n * A Matrix is used for transforming points from local\r\n * coordinates to world coordinates.\r\n */\r\nexport class Matrix {\r\n    private mat : Float32Array;\r\n    private rows : number;\r\n    private columns : number;\r\n\r\n    public constructor(rows : number, columns : number) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.mat = new Float32Array(rows * columns);\r\n        for (let i = 0; i < (rows * columns); i++)\r\n            this.mat[i] = 0.0;\r\n    }\r\n\r\n    public getData() : Float32Array {\r\n        return this.mat;\r\n    }\r\n\r\n    public getRows() : number {\r\n        return this.rows;\r\n    }\r\n\r\n    public getColumns() : number {\r\n        return this.columns;\r\n    }\r\n\r\n    public getIndex (rows : number, columns : number) : number {\r\n        return (this.rows * columns) + rows;\r\n    }\r\n    \r\n    public get (row : number, column : number) : number {\r\n        let index = this.getIndex(row, column);\r\n        let valueToReturn = this.mat[index];\r\n        return valueToReturn;\r\n    }\r\n\r\n    public set (value : number, row : number, column : number) {\r\n        let index = this.getIndex(row, column);\r\n        this.mat[index] = value;\r\n    }\r\n    \r\n    public print () : void {\r\n        let maxWidth = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            for (let j = 0; j < 4; j++) {\r\n                let testNum = this.get(j, i) + \"\";\r\n                if (testNum.length > maxWidth) {\r\n                    maxWidth = testNum.length;\r\n                }\r\n            }\r\n        }\r\n        let text = \"[ \";\r\n        for (let i = 0; i < this.rows; i++) {\r\n            if (i > 0)\r\n                text += \"  \";\r\n            for (var j = 0; j < this.columns; j++) {\r\n                var numText = this.get(i, j) + \"\";\r\n                while (numText.length < maxWidth) {\r\n                    numText = \" \" + numText;\r\n                }\r\n                text += numText;\r\n                if (j < (this.columns - 1)) {\r\n                    text += \",\";\r\n                }\r\n                text += \" \";\r\n            }\r\n            if (i < (this.rows - 1)) {\r\n                text += \"\\n\";\r\n            }\r\n            text += \"]\";\r\n            console.log(text);\r\n        }\r\n    }\r\n}","/**\r\n * Vector3\r\n * \r\n * The Vector3 class can be used for any 2d or 3d point, vector, \r\n * or rotation (i.e. angles of orientation).\r\n */\r\nexport class Vector3 {\r\n    private vec : Float32Array;\r\n    private size : number;\r\n\r\n    public constructor() {\r\n        this.vec = new Float32Array(4);\r\n        for (let i = 0; i < 4; i++)\r\n            this.vec[i] = 0.0;\r\n        this.size = 4;\r\n    }\r\n\r\n    public getSize() : number {\r\n        return this.size;\r\n    }\r\n\r\n    public getAt(index : number) : number {\r\n        return this.vec[index];\r\n    }\r\n\r\n    public getX() : number {\r\n        return this.vec[0];\r\n    }\r\n\r\n    public getY() : number {\r\n        return this.vec[1];\r\n    }\r\n\r\n    public getZ() : number {\r\n        return this.vec[2];\r\n    }\r\n\r\n    public getW() : number {\r\n        return this.vec[3];\r\n    }\r\n\r\n    public getThetaX() : number {\r\n        return this.vec[0];\r\n    }\r\n\r\n    public getThetaY() : number {\r\n        return this.vec[1];\r\n    }\r\n\r\n    public getThetaZ() : number {\r\n        return this.vec[2];\r\n    }\r\n\r\n    public set(init0 : number, init1 : number, init2 : number, init3 : number) : void {\r\n        this.vec[0] = init0;\r\n        this.vec[1] = init1;\r\n        this.vec[2] = init2;\r\n        this.vec[3] = init3;\r\n    }\r\n\r\n    public setAt(index : number, value : number) : void {\r\n        this.vec[index] = value;\r\n    }\r\n\r\n    public setX(initX : number) : void {\r\n        this.vec[0] = initX;\r\n    }\r\n\r\n    public setY(initY : number) : void {\r\n        this.vec[1] = initY;\r\n    }\r\n\r\n    public setZ(initZ : number) : void {\r\n        this.vec[2] = initZ;\r\n    }\r\n\r\n    public setW(initW : number) : void {\r\n        this.vec[3] = initW;\r\n    }\r\n\r\n    public setThetaX(initThetaX : number) : void {\r\n        this.setX(initThetaX);\r\n    }\r\n\r\n    public setThetaY(initThetaY : number) : void {\r\n        this.setY(initThetaY);\r\n    }\r\n\r\n    public setThetaZ(initThetaZ : number) : void {\r\n        this.setZ(initThetaZ);\r\n    }\r\n\r\n    public print() : void {\r\n        let text = \"[\";\r\n        for (let i = 0; i < this.size; i++) {\r\n            text += this.vec[i];\r\n            if (i < (this.size - 1)) {\r\n                text += \", \";\r\n            }\r\n        }\r\n        text += \"]\";\r\n        console.log(text);\r\n    }\r\n}","/*\r\n * This class renders text to a canvas, updated each frame.\r\n */\r\nimport {HashTable} from '../data/HashTable'\r\n\r\nexport class TextToRender {\r\n    public id : string;\r\n    public text : string;\r\n    public x : number;\r\n    public y : number;\r\n    public update : Function;\r\n    public fontFamily : string;\r\n    public fontSize : number;\r\n    public fontColor : string;\r\n    public properties : HashTable<object>;\r\n\r\n    public constructor(initId : string, initText : string, initX : number, initY : number, initUpdate : Function) {\r\n        this.id = initId;\r\n        this.text = initText;\r\n        this.x = initX;\r\n        this.y = initY;\r\n        this.update = initUpdate;\r\n        this.fontFamily = \"\";\r\n        this.fontSize = 0;\r\n        this.fontColor = \"\";\r\n        this.properties = {};\r\n    }\r\n}\r\n\r\nexport class TextRenderer {\r\n    private textToRender : Array<TextToRender>;\r\n    private textCanvas : HTMLCanvasElement;\r\n    private textCanvasWidth : number;\r\n    private textCanvasHeight : number;\r\n    private textCtx : CanvasRenderingContext2D;\r\n    private defaultFontFamily : string;\r\n    private defaultFontSize : number;\r\n    private defaultFontColor : string;\r\n\r\n    public constructor(textCanvasId : string, initFontFamily : string, initFontSize : number, initFontColor : string) {\r\n        this.textToRender = new Array();\r\n        this.textCanvas = <HTMLCanvasElement>document.getElementById(textCanvasId);\r\n        this.textCanvas.width = window.innerWidth;\r\n        this.textCanvas.height = window.innerHeight;\r\n        this.textCanvasWidth = this.textCanvas.width;\r\n        this.textCanvasHeight = this.textCanvas.height;\r\n        this.textCtx = this.textCanvas.getContext(\"2d\");\r\n        this.defaultFontFamily = initFontFamily;\r\n        this.defaultFontSize = initFontSize;\r\n        this.defaultFontColor = initFontColor;\r\n    }\r\n    \r\n    public addTextToRender(textToAdd : TextToRender) : void {\r\n        textToAdd.fontFamily = this.defaultFontFamily;\r\n        textToAdd.fontSize = this.defaultFontSize;\r\n        textToAdd.fontColor = this.defaultFontColor;\r\n        this.textToRender.push(textToAdd);\r\n    }\r\n\r\n    public clear() : void {\r\n        this.textToRender = [];\r\n    }\r\n\r\n    public getCanvasWidth() : number {\r\n        return this.textCanvasWidth;\r\n    }\r\n\r\n    public getCanvasHeight() : number {\r\n        return this.textCanvasHeight;\r\n    }\r\n\r\n    public render() : void {\r\n        this.textCtx.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\r\n        for (var i = 0; i < this.textToRender.length; i++) {\r\n            var textToRender = this.textToRender[i];\r\n            textToRender.update();\r\n            this.textCtx.font = \"\" + textToRender.fontSize + \"px \" + textToRender.fontFamily;\r\n            this.textCtx.fillStyle = textToRender.fontColor;\r\n            this.textCtx.fillText(textToRender.text, textToRender.x, textToRender.y);\r\n        }\r\n    }\r\n}","import {WebGLGameShader} from './WebGLGameShader'\r\nimport {MathUtilities} from '../math/MathUtilities'\r\nimport { Matrix } from '../math/Matrix'\r\nimport { Vector3 } from '../math/Vector3'\r\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\r\nimport {WebGLGameTexture} from './WebGLGameTexture'\r\nimport {HashTable} from '../data/HashTable'\r\nimport { GradientCircle } from '../scene/GradientCircle';\r\n\r\nvar CircleDefaults = {\r\n    A_POSITION: \"a_Position\",\r\n    A_VALUETOINTERPOLATE: \"a_ValueToInterpolate\",\r\n    U_SPRITETRANSFORM: \"u_SpriteTransform\",\r\n    VAL: \"val\",\r\n    U_OPTION: \"option\",\r\n    NUM_VERTICES: 4,\r\n    FLOATS_PER_VERTEX: 2,\r\n    FLOATS_PER_TEXTURE_COORDINATE: 2,\r\n    VERTEX_POSITION_OFFSET: 0,\r\n    TOTAL_BYTES: 20,\r\n    INDEX_OF_FIRST_VERTEX: 0\r\n}\r\n\r\nexport class WebGLGameCircleRenderer {\r\n    private shader : WebGLGameShader;\r\n    private vertexTexCoordBuffer : WebGLBuffer;\r\n    private valBuffer : WebGLBuffer;\r\n\r\n    // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\r\n    private spriteTransform : Matrix;\r\n    private spriteTranslate : Vector3;\r\n    private spriteRotate : Vector3;\r\n    private spriteScale : Vector3;    \r\n\r\n    private webGLAttributeLocations : HashTable<GLuint>;\r\n    private webGLUniformLocations : HashTable<WebGLUniformLocation>;\r\n\r\n    public constructor() {}\r\n\r\n    public getShader(): WebGLGameShader {\r\n        return this.shader;\r\n    }\r\n    \r\n    public init(webGL : WebGLRenderingContext) : void {\r\n        this.shader = new WebGLGameShader();\r\n\r\n        var fragmentShaderSource = [\r\n            'precision highp float;',\r\n            'uniform float option;',\r\n            'varying vec2 val;',\r\n            'void main() {',\r\n                'float R = 1.0;',\r\n                'float dist = sqrt(dot(val, val));',\r\n                'float alpha = 1.0;',\r\n                'if (dist > R) {',\r\n                    'discard;',\r\n                '}',\r\n                'if (option < 1.0) {',\r\n                    'gl_FragColor =', \r\n                    'vec4(0.0, 0.0, dist, alpha);',\r\n                '} else if(option < 2.0) {',\r\n                    'gl_FragColor =', \r\n                    'vec4(0.0, dist, 0.0, alpha);',\r\n                '}',\r\n                'else if(option < 3.0) {',\r\n                    'gl_FragColor =', \r\n                    'vec4(dist, 0.0, 0.0, alpha);',\r\n                '}',\r\n                'else if(option < 4.0) {',\r\n                    'gl_FragColor =', \r\n                    'vec4(dist, dist, 0.0, alpha);',\r\n                '}',\r\n                'else if(option < 5.0) {',\r\n                    'gl_FragColor =', \r\n                    'vec4(dist, 0.0, dist, alpha);',\r\n                '}',\r\n                'else if(option < 6.0) {',\r\n                    'gl_FragColor =', \r\n                    'vec4(0.0, dist, dist, alpha);',\r\n                '}',\r\n            '}'\r\n        ].join('\\n');\r\n\r\n        var vertexShaderSrc = [\r\n            'precision highp float;',\r\n            'attribute vec4 a_Position;',\r\n            'attribute vec2 a_ValueToInterpolate;',\r\n            'varying vec2 val;',    \r\n            'uniform mat4 u_SpriteTransform;',\r\n            \r\n            'void main() {',\r\n                'val = a_ValueToInterpolate;',\r\n            '    gl_Position = u_SpriteTransform',\r\n            '            * a_Position;',\r\n            '}'\r\n        ].join('\\n');\r\n        \r\n        this.shader.init(webGL, vertexShaderSrc, fragmentShaderSource);\r\n        \r\n        // GET THE webGL OBJECT TO USE\r\n        var verticesTexCoords = new Float32Array([\r\n            0.5, -0.5, 0.0, 1.0, -1.0,\r\n            0.5, 0.5, 0.0, 1.0, 1.0,\r\n            -0.5,0.5,0.0,-1.0, 1.0,\r\n            -0.5,-0.5,0.0,-1.0,-1.0,\r\n        ]);\r\n\r\n        // CREATE THE BUFFER ON THE GPU\r\n        this.vertexTexCoordBuffer = webGL.createBuffer();\r\n        this.valBuffer = webGL.createBuffer();\r\n\r\n        // BIND THE BUFFER TO BE VERTEX DATA\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n        // webGL.bindBuffer(webGL.ARRAY_BUFFER, this.valBuffer);\r\n\r\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\r\n        webGL.bufferData(webGL.ARRAY_BUFFER, verticesTexCoords, webGL.STATIC_DRAW);\r\n        // webGL.bufferData(webGL.ARRAY_BUFFER, val, webGL.STATIC_DRAW)\r\n\r\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\r\n        this.webGLAttributeLocations = {};\r\n        this.webGLUniformLocations = {};\r\n        // this.loadAttributeLocations(webGL, [SpriteDefaults.A_POSITION, SpriteDefaults.A_TEX_COORD]);\r\n        // this.loadUniformLocations(webGL, [SpriteDefaults.U_SPRITE_TRANSFORM, SpriteDefaults.U_SAMPLER, SpriteDefaults.U_TEX_COORD_FACTOR, SpriteDefaults.U_TEX_COORD_SHIFT]);\r\n\r\n        this.loadAttributeLocations(webGL, [CircleDefaults.A_POSITION, CircleDefaults.A_VALUETOINTERPOLATE]);\r\n        this.loadUniformLocations(webGL, [CircleDefaults.U_SPRITETRANSFORM, CircleDefaults.U_OPTION]);\r\n\r\n        // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\r\n        this.spriteTransform = new Matrix(4, 4);\r\n        this.spriteTranslate = new Vector3();\r\n        this.spriteRotate = new Vector3();\r\n        this.spriteScale = new Vector3();\r\n    }\r\n\r\n    public renderGradientCircle(webGL: WebGLRenderingContext,\r\n                            canvasWidth: number,\r\n                            canvasHeight: number,\r\n                            ) {\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n    }\r\n\r\n    public renderGradientCircles(  webGL : WebGLRenderingContext, \r\n                            canvasWidth : number, \r\n                            canvasHeight : number, \r\n                            visibleSet : Array<GradientCircle>) : void {\r\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n       // AND THEN RENDER EACH ONE\r\n       for (let circle of visibleSet) {\r\n            this.renderCircle(webGL, canvasWidth, canvasHeight, circle);        \r\n        }\r\n    }\r\n\r\n    private loadAttributeLocations(webGL : WebGLRenderingContext, attributeLocationNames : Array<string>) {\r\n        for (var i = 0; i < attributeLocationNames.length; i++) {\r\n            let locationName : string = attributeLocationNames[i];\r\n            let location : GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\r\n            this.webGLAttributeLocations[locationName] = location;\r\n        }\r\n    }\r\n\r\n    private loadUniformLocations(webGL : WebGLRenderingContext, uniformLocationNames : Array<string>) {\r\n        for (let i : number = 0; i < uniformLocationNames.length; i++) {\r\n            let locationName : string = uniformLocationNames[i];\r\n            let location : WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\r\n            this.webGLUniformLocations[locationName] = location;\r\n        }\r\n    }\r\n\r\n    private renderCircle(   webGL : WebGLRenderingContext, \r\n                            canvasWidth : number, \r\n                            canvasHeight : number, \r\n                            circle : GradientCircle) {\r\n\r\n\r\n\r\n        // // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE SPRITE POSITION\r\n\r\n        let spriteWidth : number = circle.getWidth();\r\n        let spriteHeight : number = circle.getHeight();\r\n        console.log(\"width: \" + spriteHeight + \" height: \" + spriteHeight);\r\n        let spriteXInPixels : number = circle.getPosition().getX() + (spriteWidth/2);\r\n        let spriteYInPixels : number = circle.getPosition().getY() + (spriteHeight/2);\r\n        let spriteXTranslate : number = (spriteXInPixels - (canvasWidth/2))/(canvasWidth/2);\r\n        let spriteYTranslate : number = (spriteYInPixels - (canvasHeight/2))/(canvasHeight/2);\r\n        this.spriteTranslate.setX(spriteXTranslate);\r\n        this.spriteTranslate.setY(-spriteYTranslate);\r\n\r\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE SPRITE SIZE\r\n        let defaultWidth : number = canvasWidth/2;\r\n        let defaultHeight : number = canvasHeight/2;\r\n        let scaleX : number = spriteWidth/defaultWidth;\r\n        let scaleY : number = spriteHeight/defaultHeight;\r\n        this.spriteScale.setX(scaleX);\r\n        this.spriteScale.setY(scaleY);\r\n\r\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\r\n        MathUtilities.identity(this.spriteTransform);\r\n        MathUtilities.model(this.spriteTransform, this.spriteTranslate, this.spriteRotate, this.spriteScale);\r\n        \r\n        // FIGURE OUT THE TEXTURE COORDINATE FACTOR AND SHIFT\r\n        // let texCoordFactorX : number = spriteWidth/texture.width;\r\n        // let texCoordFactorY : number = spriteHeight/texture.height;\r\n        // let spriteLeft : number = sprite.getLeft();\r\n        // let spriteTop : number = sprite.getTop();\r\n        // let texCoordShiftX : number = spriteLeft/texture.width;\r\n        // let texCoordShiftY : number = spriteTop/texture.height;   \r\n\r\n        // USE THE ATTRIBUTES\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n        // webGL.bindTexture(webGL.TEXTURE_2D, texture.webGLTexture);\r\n\r\n        // HOOK UP THE ATTRIBUTES\r\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations[CircleDefaults.A_POSITION];\r\n        webGL.vertexAttribPointer(\r\n            a_PositionLocation, \r\n            3, \r\n            webGL.FLOAT, \r\n            false, \r\n            20, \r\n            0);\r\n        webGL.enableVertexAttribArray(a_PositionLocation);\r\n\r\n        let a_ValueToInterpolateLocation: GLuint = this.webGLAttributeLocations[CircleDefaults.A_VALUETOINTERPOLATE];\r\n        webGL.vertexAttribPointer(\r\n            a_ValueToInterpolateLocation, \r\n            2, \r\n            webGL.FLOAT, \r\n            false, \r\n            20, \r\n            12);\r\n        webGL.enableVertexAttribArray(a_ValueToInterpolateLocation);\r\n\r\n        let colorOption: number = circle.getColor();\r\n        console.log(colorOption);\r\n        let u_optionLocation: WebGLUniformLocation = this.webGLUniformLocations[CircleDefaults.U_OPTION];\r\n        webGL.uniform1f(u_optionLocation, colorOption);\r\n\r\n\r\n        // USE THE UNIFORMS\r\n        let u_SpriteTransformLocation : WebGLUniformLocation = this.webGLUniformLocations[CircleDefaults.U_SPRITETRANSFORM];\r\n        webGL.uniformMatrix4fv(u_SpriteTransformLocation, false, this.spriteTransform.getData());\r\n\r\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\r\n        webGL.drawArrays(webGL.TRIANGLE_FAN, 0, CircleDefaults.NUM_VERTICES);\r\n    }\r\n}","import { WebGLGameCircleRenderer } from './WebGLGameCircleRenderer';\r\n/*\r\n * This serves as the subsystem that manages all game rendering.\r\n */\r\nimport {TextRenderer} from './TextRenderer'\r\nimport {WebGLGameSpriteRenderer} from './WebGLGameSpriteRenderer'\r\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\r\nimport {WebGLGameTexture } from './WebGLGameTexture';\r\nimport { GradientCircle } from '../scene/GradientCircle';\r\nimport { SceneObject } from '../scene/SceneObject';\r\n\r\nexport class WebGLGameRenderingSystem {\r\n    private renderingCanvas : HTMLCanvasElement;\r\n    private webGL : WebGLRenderingContext;\r\n    private spriteRenderer : WebGLGameSpriteRenderer;\r\n    private textRenderer : TextRenderer;\r\n    private circleRenderer: WebGLGameCircleRenderer;\r\n    private canvasWidth : number;\r\n    private canvasHeight : number;\r\n\r\n    public constructor() {}\r\n\r\n    public getTextureConstant(id : number) : number {\r\n        // WE ONLY HAVE 4 HERE, WE SHOULD HAVE A BETTER WAY OF DOING THIS\r\n        switch(id) {\r\n            case 0: return this.webGL.TEXTURE0;\r\n            case 1: return this.webGL.TEXTURE1;\r\n            case 2: return this.webGL.TEXTURE3;\r\n            default: return this.webGL.TEXTURE4;\r\n        }\r\n    }\r\n\r\n    public getWebGL() : WebGLRenderingContext {\r\n        return this.webGL;\r\n    }\r\n\r\n    public getSpriteRenderer() : WebGLGameSpriteRenderer {\r\n        return this.spriteRenderer;\r\n    }\r\n\r\n    public getTextRenderer() : TextRenderer {\r\n        return this.textRenderer;\r\n    }\r\n\r\n    public getCircleRenderer(): WebGLGameCircleRenderer {\r\n        return this.circleRenderer;\r\n    }\r\n\r\n    public init(renderingCanvasId : string, textCanvasId : string) : void {\r\n        // FIRST SETUP webGL\r\n        this.renderingCanvas = <HTMLCanvasElement>document.getElementById(renderingCanvasId);\r\n        this.renderingCanvas.width = window.innerWidth;\r\n        this.renderingCanvas.height = window.innerHeight;\r\n        this.canvasWidth = this.renderingCanvas.width;\r\n        this.canvasHeight = this.renderingCanvas.height;\r\n        this.webGL = this.renderingCanvas.getContext(\"webgl\");\r\n\r\n        // IF THE USER'S MACHINE/BROWSER DOESN'T SUPPORT\r\n        // WebGL THEN THERE'S NO POINT OF GOING ON\r\n        if (!this.webGL) {\r\n            // PROVIDE SOME FEEDBACK THAT WebGL WON'T WORK BECAUSE\r\n            // THE USER'S' GRAPHICS CARD IS FOR THE BIRDS\r\n            console.error(\"WebGL is not supported by this device\");\r\n\r\n            // AND END INITIALIZATION\r\n            return;\r\n        }\r\n\r\n        // WebGL IS SUPPORTED, SO INIT EVERYTHING THAT USES IT\r\n\r\n        // MAKE THE CLEAR COLOR BLACK\r\n        this.setClearColor(0.0, 0.0, 0.0, 1.0);\r\n\r\n        // ENABLE DEPTH TESTING\r\n        this.webGL.disable(this.webGL.DEPTH_TEST);\r\n        this.webGL.enable(this.webGL.BLEND);\r\n        this.webGL.blendFunc(this.webGL.SRC_ALPHA, this.webGL.ONE_MINUS_SRC_ALPHA);\r\n\r\n        // TURN ON BACKFACE CULLING\r\n        this.webGL.enable(this.webGL.CULL_FACE);\r\n\r\n        // THIS SPECIFIES THAT WE'RE USING THE ENTIRE CANVAS\r\n        this.webGL.viewport(0, 0, this.canvasWidth, this.canvasHeight);\r\n\r\n        // NOW MAKE THE SHADER FOR DRAWING THIS THING\r\n        this.spriteRenderer = new WebGLGameSpriteRenderer();\r\n        this.spriteRenderer.init(this.webGL);\r\n        \r\n        this.circleRenderer = new WebGLGameCircleRenderer();\r\n        this.circleRenderer.init(this.webGL);\r\n\r\n        // THIS WILL STORE OUR TEXT\r\n        this.textRenderer = new TextRenderer(textCanvasId, \"serif\", 18, \"#FFFF00\");\r\n    }\r\n\r\n    public initWebGLTexture(textureToInit : WebGLGameTexture, textureId : number, image : HTMLImageElement, callback : Function) : void {\r\n        textureToInit.width = image.width;\r\n        textureToInit.height = image.height;\r\n\r\n        // CREATE A WebGL TEXTURE ON THE GPU\r\n        textureToInit.webGLTexture = this.webGL.createTexture();\r\n        textureToInit.webGLTextureId = textureId;\r\n\r\n        // FLIP THE IMAGE'S y-AXIS\r\n        //webGL.pixelStorei(webGL.UNPACK_FLIP_Y_WEBGL, 1);\r\n\r\n        // ACTIVATE THE WebGL TEXTURE ON THE GPU\r\n        //let textureNumName : string = \"TEXTURE\" + textureId;\r\n        let textureNameConstant : number = this.getTextureConstant(textureId);\r\n        this.webGL.activeTexture(textureNameConstant);\r\n\r\n        // BIND THE TEXTURE TO A 2D TYPE\r\n        this.webGL.bindTexture(this.webGL.TEXTURE_2D, textureToInit.webGLTexture);\r\n\r\n        // SPECIFY RENDERING SETTINGS\r\n        this.webGL.texParameteri(this.webGL.TEXTURE_2D, this.webGL.TEXTURE_MIN_FILTER, this.webGL.LINEAR);\r\n\r\n        // SET THE IMAGE FOR THE TEXTURE\r\n        this.webGL.texImage2D(this.webGL.TEXTURE_2D, 0, this.webGL.RGBA, this.webGL.RGBA, this.webGL.UNSIGNED_BYTE, image);\r\n\r\n        // KEEP IT FOR WHEN WE RENDER\r\n        callback();\r\n    }\r\n\r\n    public setClearColor(r : number, g : number, b : number, a : number) : void {\r\n        this.webGL.clearColor(r, g, b, a);\r\n    }\r\n\r\n    public render(visibleSet : Array<SceneObject>) : void {\r\n        // CLEAR THE CANVAS\r\n        this.webGL.clear(this.webGL.COLOR_BUFFER_BIT | this.webGL.DEPTH_BUFFER_BIT);\r\n        \r\n        let spriteSet = new Array();\r\n        let circleSet = new Array();\r\n        for (let v of visibleSet) {\r\n            if (v instanceof GradientCircle) {\r\n                circleSet.push(v)\r\n            } else {\r\n                spriteSet.push(v)\r\n            }\r\n        }\r\n        console.log(\"circle set size: \" + circleSet.length)\r\n\r\n        // RENDER THE SPRITES ON ONE CANVAS\r\n        this.spriteRenderer.renderAnimatedSprites(this.webGL, this.canvasWidth, this.canvasHeight, spriteSet);\r\n        \r\n        // RENDER THE CIRCLES ON CANVAS\r\n        this.circleRenderer.renderGradientCircles(this.webGL, this.canvasWidth, this.canvasHeight, circleSet);\r\n\r\n        // THEN THE TEXT ON ANOTHER OVERLAPPING CANVAS\r\n        this.textRenderer.render();\r\n    }\r\n}","/*\r\n * This is a wrapper class for a WebGLProgram, i.e. a shader for custom rendering\r\n * using WebGL's programmable pipeline.\r\n */\r\nexport class WebGLGameShader {\r\n    private program : WebGLProgram;\r\n    private vertexShader : WebGLShader;\r\n    private fragmentShader : WebGLShader;\r\n\r\n    public constructor() {}\r\n\r\n    public getProgram() : WebGLProgram {\r\n        return this.program;\r\n    }\r\n\r\n    public getVertexShader(): WebGLShader {\r\n        return this.vertexShader;\r\n    }\r\n\r\n    public getFragmentShader(): WebGLShader {\r\n        return this.vertexShader;\r\n    }\r\n\r\n    public init(webGL : WebGLRenderingContext, vSource : string, fSource : string) : void {\r\n        this.vertexShader = <WebGLShader>this.createShader(webGL, webGL.VERTEX_SHADER, vSource);\r\n        this.fragmentShader = <WebGLShader>this.createShader(webGL, webGL.FRAGMENT_SHADER, fSource);\r\n        this.program = this.createShaderProgram(webGL, this.vertexShader, this.fragmentShader);\r\n    }\r\n\r\n    public createShader(webGL : WebGLRenderingContext, type : number, source : string) : WebGLShader {\r\n        // MAKE A NEW SHADER OBJECT, LOAD IT'S SOURCE, AND COMPILE IT\r\n        var shader = webGL.createShader(type);\r\n        webGL.shaderSource(shader, source);\r\n        webGL.compileShader(shader);\r\n\r\n        // DID IT COMPILE?\r\n        var success = webGL.getShaderParameter(shader, webGL.COMPILE_STATUS);\r\n        if (success) {\r\n            return shader;\r\n        }\r\n\r\n        // DISASTER\r\n        console.log(webGL.getShaderInfoLog(shader));\r\n        webGL.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    public createShaderProgram(webGL : WebGLRenderingContext, vShader : WebGLShader, fShader : WebGLShader) : WebGLProgram {\r\n        // MAKE THE GLSL SHADER PROGRAM\r\n        let programToCreate = webGL.createProgram();\r\n\r\n        // LINK THE VERT AND FRAG\r\n        webGL.attachShader(programToCreate, vShader);\r\n        webGL.attachShader(programToCreate, fShader);\r\n\r\n        // NOW WE CAN LINK THE SHADER PROGRAM\r\n        webGL.linkProgram(programToCreate);\r\n        let linked : boolean = webGL.getProgramParameter(programToCreate, webGL.LINK_STATUS);\r\n\r\n        // IS IT LINKED?\r\n        if (!linked) {\r\n            // DISASTER\r\n            let errorFeedback : string = webGL.getProgramInfoLog(programToCreate);\r\n            console.log(errorFeedback);\r\n\r\n            // DISASTER\r\n            console.log(webGL.getProgramInfoLog(programToCreate));\r\n            webGL.deleteProgram(programToCreate);\r\n        }\r\n        return programToCreate;\r\n    }\r\n}","import {WebGLGameShader} from './WebGLGameShader'\r\nimport {MathUtilities} from '../math/MathUtilities'\r\nimport { Matrix } from '../math/Matrix'\r\nimport { Vector3 } from '../math/Vector3'\r\nimport {AnimatedSprite} from '../scene/sprite/AnimatedSprite'\r\nimport {AnimatedSpriteType} from '../scene/sprite/AnimatedSpriteType'\r\nimport {WebGLGameTexture} from './WebGLGameTexture'\r\nimport {HashTable} from '../data/HashTable'\r\n\r\nvar SpriteDefaults = {\r\n    A_POSITION: \"a_Position\",\r\n    A_TEX_COORD: \"a_TexCoord\",\r\n    U_SPRITE_TRANSFORM: \"u_SpriteTransform\",\r\n    U_TEX_COORD_FACTOR: \"u_TexCoordFactor\",\r\n    U_TEX_COORD_SHIFT: \"u_TexCoordShift\",\r\n    U_SAMPLER: \"u_Sampler\",\r\n    NUM_VERTICES: 4,\r\n    FLOATS_PER_VERTEX: 2,\r\n    FLOATS_PER_TEXTURE_COORDINATE: 2,\r\n    TOTAL_BYTES: 16,\r\n    VERTEX_POSITION_OFFSET: 0,\r\n    TEXTURE_COORDINATE_OFFSET: 8,\r\n    INDEX_OF_FIRST_VERTEX: 0\r\n};\r\n\r\nexport class WebGLGameSpriteRenderer {\r\n    private shader : WebGLGameShader;\r\n    private vertexTexCoordBuffer : WebGLBuffer;\r\n\r\n    // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\r\n    private spriteTransform : Matrix;\r\n    private spriteTranslate : Vector3;\r\n    private spriteRotate : Vector3;\r\n    private spriteScale : Vector3;    \r\n\r\n    private webGLAttributeLocations : HashTable<GLuint>;\r\n    private webGLUniformLocations : HashTable<WebGLUniformLocation>;\r\n\r\n    public constructor() {}\r\n\r\n    public getShader(): WebGLGameShader {\r\n        return this.shader;\r\n    }\r\n    \r\n    public init(webGL : WebGLRenderingContext) : void {\r\n        this.shader = new WebGLGameShader();\r\n        var vertexShaderSource =\r\n            'uniform mat4 ' + SpriteDefaults.U_SPRITE_TRANSFORM + ';\\n' +\r\n            'uniform vec2 ' + SpriteDefaults.U_TEX_COORD_FACTOR + ';\\n' +\r\n            'uniform vec2 ' + SpriteDefaults.U_TEX_COORD_SHIFT + ';\\n' +\r\n            'attribute vec4 ' + SpriteDefaults.A_POSITION + ';\\n' +\r\n            'attribute vec2 ' + SpriteDefaults.A_TEX_COORD + ';\\n' +\r\n            'varying vec2 v_TexCoord;\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_Position = ' + SpriteDefaults.U_SPRITE_TRANSFORM + ' * ' + SpriteDefaults.A_POSITION + ';\\n' +\r\n            '  vec2 tempTexCoord = ' + SpriteDefaults.A_TEX_COORD + ' * ' + SpriteDefaults.U_TEX_COORD_FACTOR + ';\\n' +\r\n            '  v_TexCoord = tempTexCoord + ' + SpriteDefaults.U_TEX_COORD_SHIFT + ';\\n' +\r\n            '}\\n';\r\n        var fragmentShaderSource =\r\n            '#ifdef GL_ES\\n' +\r\n            'precision mediump float;\\n' +\r\n            '#endif\\n' +\r\n            'uniform sampler2D ' + SpriteDefaults.U_SAMPLER + ';\\n' +\r\n            'varying vec2 v_TexCoord;\\n' +\r\n            'void main() {\\n' +\r\n            '  gl_FragColor = texture2D(' + SpriteDefaults.U_SAMPLER + ', v_TexCoord);\\n' +\r\n            '}\\n';\r\n        this.shader.init(webGL, vertexShaderSource, fragmentShaderSource);\r\n\r\n        // GET THE webGL OBJECT TO USE\r\n        var verticesTexCoords = new Float32Array([\r\n            -0.5,  0.5, 0.0, 0.0,\r\n            -0.5, -0.5, 0.0, 1.0,\r\n             0.5,  0.5, 1.0, 0.0,\r\n             0.5, -0.5, 1.0, 1.0\r\n        ]);\r\n\r\n        // CREATE THE BUFFER ON THE GPU\r\n        this.vertexTexCoordBuffer = webGL.createBuffer();\r\n\r\n        // BIND THE BUFFER TO BE VERTEX DATA\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n\r\n        // AND SEND THE DATA TO THE BUFFER WE CREATED ON THE GPU\r\n        webGL.bufferData(webGL.ARRAY_BUFFER, verticesTexCoords, webGL.STATIC_DRAW);\r\n\r\n        // SETUP THE SHADER ATTRIBUTES AND UNIFORMS\r\n        this.webGLAttributeLocations = {};\r\n        this.webGLUniformLocations = {};\r\n        this.loadAttributeLocations(webGL, [SpriteDefaults.A_POSITION, SpriteDefaults.A_TEX_COORD]);\r\n        this.loadUniformLocations(webGL, [SpriteDefaults.U_SPRITE_TRANSFORM, SpriteDefaults.U_SAMPLER, SpriteDefaults.U_TEX_COORD_FACTOR, SpriteDefaults.U_TEX_COORD_SHIFT]);\r\n\r\n        // WE'LL USE THESE FOR TRANSOFMRING OBJECTS WHEN WE DRAW THEM\r\n        this.spriteTransform = new Matrix(4, 4);\r\n        this.spriteTranslate = new Vector3();\r\n        this.spriteRotate = new Vector3();\r\n        this.spriteScale = new Vector3();\r\n    }\r\n\r\n    public renderAnimatedSprites(  webGL : WebGLRenderingContext, \r\n                            canvasWidth : number, \r\n                            canvasHeight : number, \r\n                            visibleSet : Array<AnimatedSprite>) : void {\r\n        // SELECT THE ANIMATED SPRITE RENDERING SHADER PROGRAM FOR USE\r\n        let shaderProgramToUse = this.shader.getProgram();\r\n        webGL.useProgram(shaderProgramToUse);\r\n\r\n       // AND THEN RENDER EACH ONE\r\n       for (let sprite of visibleSet) {\r\n            this.renderAnimatedSprite(webGL, canvasWidth, canvasHeight, sprite);        \r\n        }\r\n    }\r\n\r\n    private loadAttributeLocations(webGL : WebGLRenderingContext, attributeLocationNames : Array<string>) {\r\n        for (var i = 0; i < attributeLocationNames.length; i++) {\r\n            let locationName : string = attributeLocationNames[i];\r\n            let location : GLuint = webGL.getAttribLocation(this.shader.getProgram(), locationName);\r\n            this.webGLAttributeLocations[locationName] = location;\r\n        }\r\n    }\r\n\r\n    private loadUniformLocations(webGL : WebGLRenderingContext, uniformLocationNames : Array<string>) {\r\n        for (let i : number = 0; i < uniformLocationNames.length; i++) {\r\n            let locationName : string = uniformLocationNames[i];\r\n            let location : WebGLUniformLocation = webGL.getUniformLocation(this.shader.getProgram(), locationName);\r\n            this.webGLUniformLocations[locationName] = location;\r\n        }\r\n    }\r\n\r\n    private renderAnimatedSprite(   webGL : WebGLRenderingContext, \r\n                            canvasWidth : number, \r\n                            canvasHeight : number, \r\n                            sprite : AnimatedSprite) {\r\n        let spriteType : AnimatedSpriteType = sprite.getSpriteType();\r\n        let texture : WebGLGameTexture = spriteType.getSpriteSheetTexture();\r\n\r\n        // CALCULATE HOW MUCH TO TRANSLATE THE QUAD PER THE SPRITE POSITION\r\n        let spriteWidth : number = spriteType.getSpriteWidth();\r\n        let spriteHeight : number = spriteType.getSpriteHeight();\r\n        let spriteXInPixels : number = sprite.getPosition().getX() + (spriteWidth/2);\r\n        let spriteYInPixels : number = sprite.getPosition().getY() + (spriteHeight/2);\r\n        let spriteXTranslate : number = (spriteXInPixels - (canvasWidth/2))/(canvasWidth/2);\r\n        let spriteYTranslate : number = (spriteYInPixels - (canvasHeight/2))/(canvasHeight/2);\r\n        this.spriteTranslate.setX(spriteXTranslate);\r\n        this.spriteTranslate.setY(-spriteYTranslate);\r\n\r\n        // CALCULATE HOW MUCH TO SCALE THE QUAD PER THE SPRITE SIZE\r\n        let defaultWidth : number = canvasWidth/2;\r\n        let defaultHeight : number = canvasHeight/2;\r\n        let scaleX : number = spriteWidth/defaultWidth;\r\n        let scaleY : number = spriteHeight/defaultHeight;\r\n        this.spriteScale.setX(scaleX);\r\n        this.spriteScale.setY(scaleY);\r\n\r\n        // @todo - COMBINE THIS WITH THE ROTATE AND SCALE VALUES FROM THE SPRITE\r\n        MathUtilities.identity(this.spriteTransform);\r\n        MathUtilities.model(this.spriteTransform, this.spriteTranslate, this.spriteRotate, this.spriteScale);\r\n        \r\n        // FIGURE OUT THE TEXTURE COORDINATE FACTOR AND SHIFT\r\n        let texCoordFactorX : number = spriteWidth/texture.width;\r\n        let texCoordFactorY : number = spriteHeight/texture.height;\r\n        let spriteLeft : number = sprite.getLeft();\r\n        let spriteTop : number = sprite.getTop();\r\n        let texCoordShiftX : number = spriteLeft/texture.width;\r\n        let texCoordShiftY : number = spriteTop/texture.height;   \r\n\r\n        // USE THE ATTRIBUTES\r\n        webGL.bindBuffer(webGL.ARRAY_BUFFER, this.vertexTexCoordBuffer);\r\n        webGL.bindTexture(webGL.TEXTURE_2D, texture.webGLTexture);\r\n\r\n        // HOOK UP THE ATTRIBUTES\r\n        let a_PositionLocation : GLuint = this.webGLAttributeLocations[SpriteDefaults.A_POSITION];\r\n        webGL.vertexAttribPointer(a_PositionLocation, SpriteDefaults.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, SpriteDefaults.TOTAL_BYTES, SpriteDefaults.VERTEX_POSITION_OFFSET);\r\n        webGL.enableVertexAttribArray(a_PositionLocation);\r\n        let a_TexCoordLocation : GLuint = this.webGLAttributeLocations[SpriteDefaults.A_TEX_COORD];\r\n        webGL.vertexAttribPointer(a_TexCoordLocation, SpriteDefaults.FLOATS_PER_TEXTURE_COORDINATE, webGL.FLOAT, false, SpriteDefaults.TOTAL_BYTES, SpriteDefaults.TEXTURE_COORDINATE_OFFSET);\r\n        webGL.enableVertexAttribArray(a_TexCoordLocation);\r\n\r\n        // USE THE UNIFORMS\r\n        let u_SpriteTransformLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_SPRITE_TRANSFORM];\r\n        webGL.uniformMatrix4fv(u_SpriteTransformLocation, false, this.spriteTransform.getData());\r\n        let u_SamplerLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_SAMPLER];\r\n        webGL.uniform1i(u_SamplerLocation, texture.webGLTextureId);\r\n        let u_TexCoordFactorLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_TEX_COORD_FACTOR];\r\n        webGL.uniform2f(u_TexCoordFactorLocation, texCoordFactorX, texCoordFactorY);\r\n        let u_TexCoordShiftLocation : WebGLUniformLocation = this.webGLUniformLocations[SpriteDefaults.U_TEX_COORD_SHIFT];\r\n        webGL.uniform2f(u_TexCoordShiftLocation, texCoordShiftX, texCoordShiftY);\r\n\r\n        // DRAW THE SPRITE AS A TRIANGLE STRIP USING 4 VERTICES, STARTING AT THE START OF THE ARRAY (index 0)\r\n        webGL.drawArrays(webGL.TRIANGLE_STRIP, SpriteDefaults.INDEX_OF_FIRST_VERTEX, SpriteDefaults.NUM_VERTICES);\r\n    }\r\n}","export class WebGLGameTexture {\r\n    public webGLTextureId: number;\r\n    public webGLTexture: WebGLTexture;\r\n    public image: HTMLImageElement;\r\n    public width : number;\r\n    public height : number;\r\n}","import { SceneObject } from \"./SceneObject\";\r\n\r\n\r\nexport class GradientCircle extends SceneObject {\r\n\r\n    private width: number;\r\n    private height: number;\r\n    private r: number;\r\n    private g: number;\r\n    private b: number;\r\n    private color: number;\r\n\r\n    private radius: number\r\n\r\n    public constructor(width: number, height: number) {\r\n        super();\r\n        this.width = width\r\n        this.height = height\r\n        this.radius = 20;\r\n        let max = 5;\r\n        let min = 0;\r\n        this.color = Math.random() * (max - min + 1) + min;\r\n    }\r\n\r\n    public getColor(): number {\r\n        return this.color;\r\n    }\r\n\r\n    public getWidth(): number {\r\n        return this.width;\r\n    }\r\n\r\n    \r\n    public getHeight(): number {\r\n        return this.height;\r\n    }\r\n\r\n\r\n    public contains(testX : number, testY : number) : boolean {\r\n        let spriteWidth = this.getWidth();\r\n        let spriteHeight = this.getHeight();\r\n        let spriteLeft = this.getPosition().getX();\r\n        let spriteRight = this.getPosition().getX() + spriteWidth;\r\n        let spriteTop = this.getPosition().getY();\r\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\r\n        if (    (testX < spriteLeft)\r\n            ||  (spriteRight < testX)\r\n            ||  (testY < spriteTop)\r\n            ||  (spriteBottom < testY)) {\r\n                return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        return `(${this.getPosition().getX()}, ${this.getPosition().getY()})`\r\n    }\r\n\r\n    \r\n}\r\n\r\n","import {SceneObject} from './SceneObject'\r\nimport {AnimatedSprite} from './sprite/AnimatedSprite'\r\nimport { Vector3 } from '../math/Vector3';\r\nimport { GradientCircle } from './GradientCircle';\r\n\r\nexport class SceneGraph {\r\n    // AND ALL OF THE ANIMATED SPRITES, WHICH ARE NOT STORED\r\n    // SORTED OR IN ANY PARTICULAR ORDER. NOTE THAT ANIMATED SPRITES\r\n    // ARE SCENE OBJECTS\r\n    private animatedSprites : Array<AnimatedSprite>;\r\n\r\n    // SET OF VISIBLE OBJECTS, NOTE THAT AT THE MOMENT OUR\r\n    // SCENE GRAPH IS QUITE SIMPLE, SO THIS IS THE SAME AS\r\n    // OUR LIST OF ANIMATED SPRITES\r\n    private visibleSet : Array<SceneObject>;\r\n\r\n    private graidentCircles: Array<GradientCircle>;\r\n\r\n    public constructor() {\r\n        // DEFAULT CONSTRUCTOR INITIALIZES OUR DATA STRUCTURES\r\n        this.animatedSprites = new Array();\r\n        this.visibleSet = new Array();\r\n        this.graidentCircles = new Array();\r\n    }\r\n\r\n    public getTotalSceneNums(): number {\r\n        return this.graidentCircles.length + this.animatedSprites.length\r\n    }\r\n\r\n    public getNumSprites() : number {\r\n        return this.animatedSprites.length;\r\n    }\r\n\r\n    public addAnimatedSprite(sprite : AnimatedSprite) : void {\r\n        this.animatedSprites.push(sprite);\r\n    }\r\n\r\n    public addGradientCircle(cirlce: GradientCircle): void{\r\n        this.graidentCircles.push(cirlce);\r\n    }\r\n\r\n    public getObjAt(testX : number, testY : number): SceneObject {\r\n        let k: number = this.visibleSet.length - 1;\r\n        let i: number;\r\n        for (i = k; i >= 0; i --) {\r\n            if (this.visibleSet[i].contains(testX, testY))\r\n                return this.visibleSet[i];\r\n        }\r\n        return null\r\n    }\r\n\r\n    public getSpriteAt(testX : number, testY : number) : AnimatedSprite {\r\n        // for (let sprite of this.animatedSprites) {\r\n        //     if (sprite.contains(testX, testY))\r\n        //         return sprite;\r\n        // }\r\n        // return null;\r\n        let k: number = this.animatedSprites.length - 1;\r\n        let i: number;\r\n        for (i = k; i >= 0; i --) {\r\n            if (this.animatedSprites[i].contains(testX, testY))\r\n                return this.animatedSprites[i];\r\n        }\r\n        return null\r\n    }\r\n\r\n    public getCircleAt(testX: number, testY: number): GradientCircle {\r\n        // for (let c of this.graidentCircles) {\r\n        //     if (c.contains(testX, testY))\r\n        //         return c\r\n        // }\r\n        // return null;\r\n        let i: number;\r\n        let k  = this.graidentCircles.length - 1;\r\n        for (i= k; i >= 0; i --) {\r\n            if (this.graidentCircles[i].contains(testX, testY))\r\n                return this.graidentCircles[i];\r\n        }\r\n        return null\r\n    }\r\n\r\n    public getAnimatedSprites(): Array<AnimatedSprite> {    \r\n        return this.animatedSprites;\r\n    }\r\n\r\n    public removeCircle(c: GradientCircle): void {\r\n        let cPos: Vector3 = c.getPosition();\r\n        let newArr = new Array<GradientCircle>();\r\n        if (c != null) {\r\n            for (let s of this.graidentCircles) {\r\n                let pos: Vector3 = s.getPosition();\r\n                if (pos.getX() !== cPos.getX() &&\r\n                    pos.getY() !== cPos.getY()) {\r\n                    newArr.push(s);\r\n                }\r\n            }\r\n        }\r\n        this.graidentCircles = newArr;\r\n    }\r\n\r\n    public removeObj(obj: SceneObject): void {\r\n        if (obj instanceof GradientCircle) { \r\n            this.removeCircle(obj as GradientCircle);\r\n        } else if (obj instanceof AnimatedSprite) {\r\n            this.removeSprite((obj as AnimatedSprite));\r\n        }\r\n    }\r\n\r\n    public removeSprite(sprite: AnimatedSprite): void {\r\n        console.log(\"removing function is called\")\r\n        var spritePos: Vector3 = sprite.getPosition();\r\n\r\n        let newArr = new Array<AnimatedSprite>();\r\n        if (sprite != null) {\r\n            for (let s of this.animatedSprites) {\r\n                let pos: Vector3 = s.getPosition();\r\n                if (pos.getX() !== spritePos.getX() &&\r\n                    pos.getY() !== spritePos.getY()) {\r\n                    newArr.push(s);\r\n                }\r\n            }\r\n        }\r\n        console.log(`old size: ${this.animatedSprites.length} ... new size:${newArr.length}`);\r\n        console.log(newArr)\r\n        this.animatedSprites = newArr;\r\n    }\r\n\r\n    /**\r\n     * update\r\n     * \r\n     * Called once per frame, this function updates the state of all the objects\r\n     * in the scene.\r\n     * \r\n     * @param delta The time that has passed since the last time this update\r\n     * funcation was called.\r\n     */\r\n    public update(delta : number) : void {\r\n        for (let sprite of this.animatedSprites) {\r\n            sprite.update(delta);\r\n        }\r\n    }\r\n\r\n    public scope() : Array<SceneObject> {\r\n        // CLEAR OUT THE OLD\r\n        this.visibleSet = [];\r\n\r\n        // PUT ALL THE SCENE OBJECTS INTO THE VISIBLE SET\r\n        for (let sprite of this.animatedSprites) {\r\n            this.visibleSet.push(sprite);\r\n        }\r\n\r\n        for (let c of this.graidentCircles) {\r\n            this.visibleSet.push(c);\r\n        }\r\n\r\n        return this.visibleSet;\r\n    }\r\n}","import {Vector3} from '../math/Vector3'\r\n\r\n/**\r\n * SceneObject\r\n * \r\n * A SceneObject is something that can be placed into the scene graph. It has\r\n * a position, rotation, and scale in the game world. Note that its position\r\n * is typically its centered location, so if we're talking about a 2d box, \r\n * it would be the center of that box.\r\n */\r\nexport abstract class SceneObject {\r\n    private position : Vector3;\r\n    private rotation : Vector3;\r\n    private scale : Vector3;\r\n\r\n    public constructor() {\r\n        this.position = new Vector3();\r\n        this.rotation = new Vector3();\r\n        this.scale = new Vector3();\r\n\r\n        // CLEAR ALL VALUES\r\n        this.position.set(0.0, 0.0, 0.0, 1.0);\r\n        this.rotation.set(0.0, 0.0, 0.0, 1.0);\r\n        this.scale.set(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n\r\n    public getPosition() : Vector3 {\r\n        return this.position;\r\n    }    \r\n\r\n    public getRotation() : Vector3 {\r\n        return this.rotation;\r\n    }\r\n\r\n    public getScale() : Vector3 {\r\n        return this.scale;\r\n    }\r\n\r\n    public abstract contains(testX : number, testY : number) : boolean;\r\n}","import {SceneObject} from '../SceneObject'\r\nimport {AnimatedSpriteType} from './AnimatedSpriteType'\r\n\r\nexport class AnimatedSprite extends SceneObject {\r\n    private spriteType : AnimatedSpriteType;\r\n    private state : string;\r\n    private animationFrameIndex : number;\r\n    private frameCounter : number;\r\n    \r\n    public constructor(initSpriteType : AnimatedSpriteType, initState : string) {\r\n        super();\r\n        this.spriteType = initSpriteType;\r\n        \r\n        // START RESET\r\n        this.state = initState;\r\n        this.animationFrameIndex = 0;\r\n        this.frameCounter = 0;\r\n    }\r\n\r\n    public getAnimationFrameIndex() : number {\r\n        return this.animationFrameIndex;\r\n    }\r\n\r\n    public getFrameCounter() : number {\r\n        return this.frameCounter;\r\n    }\r\n\r\n    public getSpriteType() : AnimatedSpriteType {\r\n        return this.spriteType;\r\n    }\r\n\r\n    public getState() : string {\r\n        return this.state;\r\n    }\r\n    \r\n    public setState(initState : string) : void {\r\n        this.state = initState;\r\n        this.animationFrameIndex = 0;\r\n        this.frameCounter = 0;\r\n    }\r\n    \r\n    public update(delta : number) : void {\r\n        this.frameCounter++;\r\n        \r\n        // HAVE WE GONE PAST THE LAST FRAME IN THE ANIMATION?\r\n        var currentAnimation = this.spriteType.getAnimation(this.state);\r\n        var currentFrame = currentAnimation[this.animationFrameIndex];\r\n        if (this.frameCounter > (currentFrame.duration)) {\r\n            this.animationFrameIndex++;\r\n            if (this.animationFrameIndex >= currentAnimation.length) {\r\n                this.animationFrameIndex = 0;\r\n            }\r\n            this.frameCounter = 0;\r\n        }\r\n    }\r\n\r\n    public contains(pointX : number, pointY : number) : boolean {\r\n        let spriteWidth = this.getSpriteType().getSpriteWidth();\r\n        let spriteHeight = this.getSpriteType().getSpriteHeight();\r\n        let spriteLeft = this.getPosition().getX();\r\n        let spriteRight = this.getPosition().getX() + spriteWidth;\r\n        let spriteTop = this.getPosition().getY();\r\n        let spriteBottom = this.getPosition().getY() + spriteHeight;\r\n        if (    (pointX < spriteLeft)\r\n            ||  (spriteRight < pointX)\r\n            ||  (pointY < spriteTop)\r\n            ||  (spriteBottom < pointY)) {\r\n                return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /**RENAME THIS METHOD SO IT DENOTES PIXEL LOCATION IN TEXTURE */\r\n    public getLeft() : number {\r\n        return this.spriteType.getLeft(this.state, this.animationFrameIndex);\r\n    }\r\n    \r\n    public getTop() : number {\r\n        return this.spriteType.getTop(this.state, this.animationFrameIndex);\r\n    }\r\n\r\n    public toString() : string {\r\n        let summary : string =  \"{ position: (\"\r\n                            +   this.getPosition().getX() + \", \" + this.getPosition().getY() + \") \"\r\n                            +   \"(state: \" + this.getState() + \") \"\r\n                            +   \"(animationFrameIndex: \" + this.getAnimationFrameIndex() + \") \"\r\n                            +   \"(frameCounter: \" + this.getFrameCounter() + \") \";\r\n        return summary;\r\n    }\r\n}","import {WebGLGameTexture} from '../../rendering/WebGLGameTexture'\r\nimport {HashTable} from '../../data/HashTable'\r\n\r\nexport class AnimationFrame {\r\n    public left : number;\r\n    public top : number;\r\n    public duration : number;\r\n\r\n    constructor(initLeft : number, initTop : number, initDuration : number) {\r\n        this.left = initLeft;\r\n        this.top = initTop;\r\n        this.duration = initDuration;\r\n    }\r\n}\r\n\r\nexport class AnimatedSpriteType {\r\n    private spriteSheetTexture : WebGLGameTexture;\r\n    private animations : HashTable<Array<AnimationFrame>>;\r\n    private spriteWidth : number;\r\n    private spriteHeight : number;\r\n\r\n    public constructor(initSpriteSheetTexture : WebGLGameTexture, \r\n                initSpriteWidth : number, initSpriteHeight : number) {\r\n        this.spriteSheetTexture = initSpriteSheetTexture;\r\n        this.animations = {};\r\n        this.spriteWidth = initSpriteWidth;\r\n        this.spriteHeight = initSpriteHeight;\r\n    }\r\n\r\n    public addAnimation(state : string) : void {\r\n        this.animations[state] = new Array<AnimationFrame>();\r\n    }\r\n\r\n    public addAnimationFrame(state : string, index : number, frameDuration : number) : void {\r\n        var columns = this.spriteSheetTexture.width/this.spriteWidth;\r\n        var rows = this.spriteSheetTexture.height/this.spriteHeight;\r\n        var col = index % columns;\r\n        var row = Math.floor(index /  columns);\r\n        var left = col * this.spriteWidth;\r\n        var top = row * this.spriteHeight;\r\n        this.animations[state].push(new AnimationFrame(left, top, frameDuration));\r\n    }\r\n\r\n    public getSpriteWidth() : number {\r\n        return this.spriteWidth;\r\n    }\r\n\r\n    public getSpriteHeight() : number {\r\n        return this.spriteHeight;\r\n    }\r\n\r\n    public getSpriteSheetTexture() : WebGLGameTexture {\r\n        return this.spriteSheetTexture;\r\n    }\r\n\r\n    public getAnimation(state : string) : Array<AnimationFrame> {\r\n        return this.animations[state];\r\n    }\r\n\r\n    public getLeft(state : string, frameIndex : number) : number {\r\n        let animationFrame : AnimationFrame = this.animations[state][frameIndex];\r\n        return animationFrame.left;\r\n    }\r\n\r\n    public getTop(state : string, frameIndex : number) : number {\r\n        let animationFrame : AnimationFrame = this.animations[state][frameIndex];\r\n        return animationFrame.top;\r\n    }\r\n}","import { game } from './../../animated_sprite_demo/AnimatedSpriteDemo';\r\nimport { GradientCircle } from './../scene/GradientCircle';\r\nimport { AnimatedSpriteType } from './../scene/sprite/AnimatedSpriteType';\r\nimport { ResourceManager } from './../files/ResourceManager';\r\n\r\n\r\n/*\r\n * This provides responses to UI input.\r\n */\r\nimport {AnimatedSprite} from \"../scene/sprite/AnimatedSprite\"\r\nimport {SceneGraph} from \"../scene/SceneGraph\"\r\nimport { TextToRender, TextRenderer } from './../rendering/TextRenderer';\r\nimport { WebGLGameRenderingSystem } from './../rendering/WebGLGameRenderingSystem';\r\nimport { SceneObject } from '../scene/SceneObject';\r\n\r\n\r\n\r\n\r\n\r\nexport class UIController {\r\n    private spriteToDrag : AnimatedSprite;\r\n    private scene : SceneGraph;\r\n    private dragOffsetX : number;\r\n    private dragOffsetY : number;\r\n    private renderingSystem : WebGLGameRenderingSystem;\r\n    private detail: TextToRender;\r\n    private mouseOverSprite: AnimatedSprite;\r\n    private circleToDrag: GradientCircle;\r\n    private mouseOverCircle: GradientCircle;\r\n    private mouseOverObj: SceneObject;\r\n\r\n    private mouseX: number;\r\n    private mouseY: number;\r\n\r\n    public constructor() {}\r\n\r\n    public init(canvasId : string, initScene : SceneGraph,\r\n            renderingSystem: WebGLGameRenderingSystem\r\n        ) : void {\r\n        this.spriteToDrag = null;\r\n        this.scene = initScene;\r\n        this.dragOffsetX = -1;\r\n        this.dragOffsetY = -1;\r\n        this.renderingSystem = renderingSystem;\r\n\r\n        let canvas : HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(canvasId);\r\n        canvas.addEventListener(\"mousedown\", this.mouseDownHandler);\r\n        canvas.addEventListener(\"mousemove\", this.mouseMoveHandler);\r\n        canvas.addEventListener(\"mouseup\", this.mouseUpHandler);\r\n        canvas.addEventListener(\"click\", this.mouseOneClickHandler);\r\n        canvas.addEventListener(\"dblclick\", this.mouseDoubleClickHandler);\r\n        canvas.addEventListener(\"mousemove\", this.mouseOverHandler);\r\n    }\r\n\r\n    public getMouseX(): number {\r\n        return this.mouseX;\r\n    }\r\n\r\n    public getMouseY(): number {\r\n        return this.mouseY;\r\n    }\r\n\r\n    public getMouseOverSprite(): AnimatedSprite {\r\n        return this.mouseOverSprite;\r\n    }\r\n\r\n    public getMouseOverCircle(): GradientCircle {\r\n        return this.mouseOverCircle;\r\n    }\r\n\r\n    public getMouseOverObj(): SceneObject {\r\n        return this.mouseOverObj;\r\n    }\r\n\r\n    public mouseOverHandler = (event: MouseEvent): void => {\r\n        console.log(\"MOUSING OVER YO\");\r\n        let mousePressX : number = event.clientX;\r\n        let mousePressY : number = event.clientY;\r\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\r\n        let circle: GradientCircle  = this.scene.getCircleAt(mousePressX, mousePressY);\r\n        let obj: SceneObject = this.scene.getObjAt(mousePressX, mousePressY);\r\n        var textRenderer: TextRenderer = this.renderingSystem.getTextRenderer();\r\n        this.mouseX = event.clientX;\r\n        this.mouseY = event.clientY;\r\n\r\n        if (obj != null) {\r\n            this.mouseOverObj = obj;\r\n        } else {\r\n            this.mouseOverObj = null;\r\n        }\r\n    \r\n\r\n        // if (sprite != null) {\r\n        //     console.log(\"Mousing over the sprite\");\r\n        //     this.mouseOverSprite = sprite;\r\n        // } else if (circle != null) {\r\n        //     this.mouseOverCircle = circle;\r\n        // } else {\r\n        //     this.mouseOverSprite = null;\r\n        //     this.mouseOverCircle = null;\r\n        // }\r\n    }\r\n\r\n    public mouseDoubleClickHandler = (event: MouseEvent): void => {\r\n        console.log(\"removing operation\");\r\n        let mousePressX : number = event.clientX;\r\n        let mousePressY : number = event.clientY;\r\n        let obj: SceneObject = this.scene.getObjAt(mousePressX, mousePressY);\r\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\r\n        let circle: GradientCircle  = this.scene.getCircleAt(mousePressX, mousePressY);\r\n        console.log(\"mousePressX: \" + mousePressX);\r\n        console.log(\"mousePressY: \" + mousePressY);\r\n        console.log(\"sprite: \" + sprite);\r\n        if (obj != null) {\r\n            this.scene.removeObj(obj);\r\n        }      \r\n        // if (sprite != null) {\r\n        //     // Remove sprite\r\n        //     this.scene.removeSprite(sprite);\r\n        // } else if (circle != null) {\r\n        //     this.scene.removeCircle(circle);\r\n        // }\r\n    }\r\n\r\n    public mouseOneClickHandler = (event: MouseEvent): void => {\r\n        const DEMO_SPRITE_TYPES : string[] = [\r\n            'resources/animated_sprites/RedCircleMan.json',\r\n            'resources/animated_sprites/MultiColorBlock.json'\r\n        ];\r\n        const DEMO_SPRITE_STATES = {\r\n            FORWARD_STATE: 'FORWARD',\r\n            REVERSE_STATE: 'REVERSE'\r\n        };\r\n        let mousePressX : number = event.clientX;\r\n        let mousePressY : number = event.clientY;\r\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\r\n        let circle : GradientCircle = this.scene.getCircleAt(mousePressX, mousePressY);\r\n        var ResourceManager: ResourceManager = game.getResourceManager();\r\n        let max = 1;\r\n        let min = 0;\r\n        let k  = Math.floor(Math.random() * (max - min + 1)) + min;\r\n        if (k < 1) {\r\n            if (sprite == null && circle == null) {\r\n                // randomly add a new sprite\r\n                let max = 1;\r\n                let min = 0;\r\n                let i  = Math.floor(Math.random() * (max - min + 1)) + min;\r\n                console.log(\"adding sprite operation\");\r\n                let spriteTypeToUse : string = DEMO_SPRITE_TYPES[i];\r\n                let animatedSpriteType : AnimatedSpriteType = ResourceManager.getAnimatedSpriteTypeById(spriteTypeToUse);\r\n                let spriteToAdd : AnimatedSprite = new AnimatedSprite(animatedSpriteType, DEMO_SPRITE_STATES.FORWARD_STATE);\r\n                spriteToAdd.getPosition().set(mousePressX, mousePressY, 0.0, 1.0);\r\n                this.scene.addAnimatedSprite(spriteToAdd);\r\n            } \r\n        } else {\r\n            if (sprite == null && circle == null) {\r\n                let circleToAdd: GradientCircle = new GradientCircle(300, 300);\r\n                circleToAdd.getPosition().set(mousePressX, mousePressY, 0.0, 1.0);\r\n                this.scene.addGradientCircle(circleToAdd);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    public mouseDownHandler = (event : MouseEvent) : void => {\r\n        let mousePressX : number = event.clientX;\r\n        let mousePressY : number = event.clientY;\r\n        let sprite : AnimatedSprite = this.scene.getSpriteAt(mousePressX, mousePressY);\r\n        let circle : GradientCircle = this.scene.getCircleAt(mousePressX, mousePressY);\r\n        console.log(\"mousePressX: \" + mousePressX);\r\n        console.log(\"mousePressY: \" + mousePressY);\r\n        console.log(\"sprite: \" + sprite);\r\n        if (sprite != null) {\r\n            // START DRAGGING IT\r\n            this.spriteToDrag = sprite;\r\n            this.dragOffsetX = sprite.getPosition().getX() - mousePressX;\r\n            this.dragOffsetY = sprite.getPosition().getY() - mousePressY;\r\n        } else if (circle != null) {\r\n            this.circleToDrag = circle;\r\n            this.dragOffsetX = circle.getPosition().getX() - mousePressX;\r\n            this.dragOffsetY = circle.getPosition().getY() - mousePressY;\r\n        }\r\n    }\r\n    \r\n    public mouseMoveHandler = (event : MouseEvent) : void => {\r\n        if (this.spriteToDrag != null) {\r\n            this.spriteToDrag.getPosition().set(event.clientX + this.dragOffsetX, \r\n                                                event.clientY + this.dragOffsetY, \r\n                                                this.spriteToDrag.getPosition().getZ(), \r\n                                                this.spriteToDrag.getPosition().getW());\r\n        } else if (this.circleToDrag != null) {\r\n            this.circleToDrag.getPosition().set(event.clientX + this.dragOffsetX, \r\n                event.clientY + this.dragOffsetY, \r\n                this.circleToDrag.getPosition().getZ(), \r\n                this.circleToDrag.getPosition().getW());\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler = (event : MouseEvent) : void => {\r\n        this.spriteToDrag = null;\r\n        this.circleToDrag = null;\r\n    }\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}